[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/parks/efteling/efteling.js",
    "content": "import moment from 'moment-timezone';\nimport fetch from 'node-fetch';\nimport fs from 'fs';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* Efteling Park Object\n*/\nexport class Efteling {\n  /**\n   * Create a new Efteling Park object\n   * @param {object} options\n   */\n  constructor() {\n    this.name = 'Efteling';\n\n    // Set the parks entrance as it's default location\n    this.latutude = 51.65098350641645;\n    this.longitude = 5.049916835374731;\n\n    this.timezone = 'Europe/Amsterdam';\n\n    // Load the .ENV variables here\n    this.searchURL = process.env.EFTELING_SEARCH_URL;\n    this.apiKey = process.env.EFTELING_API_KEY;\n    this.waitTimesURL = process.env.EFTELING_WAITTIMES_URL;\n    this.histURL = process.env.EFTELING_HIST_URL;\n\n    this.language = process.env.LANGUAGE;\n\n    if (!this.searchURL) throw new Error('Missing Efteling search url!');\n    if (!this.apiKey) throw new Error('Missing Efteling apiKey!');\n    if (!this.waitTimesURL) throw new Error('Missing Efteling waittimes url!');\n    if (!this.histURL) throw new Error('Missing Efteling Operating Hours url!');\n    if (!this.language) {\n      this.language = 'en';\n    }\n  }\n\n  // Load the Efteling poidata\n  // const poidata = ('./data/parks/efteling/efteling_pois.json');\n  // const poimock = ('./data/parks/efteling/efteling_poi_mock.json');\n\n  /**\n  * Get Efteling POI data\n  * This data contains general ride names, descriptions etc.\n  * @return {string} All Efteling POIS without queuetimes\n  */\n  async getPOIS() {\n    return fetch(this.searchURL +\n      `search?q.parser=structured&size=1000&q=(and (phrase field%3Dlanguage '$${this.language}'))`,\n    {\n      method: 'GET',\n      headers: {\n        Authorization: this.apiKey,\n      },\n    },\n    )\n        .then((res) => res.json())\n        .then((rideData) => {\n          const poi = {};\n          let singlerider = 'false'; // Let singlerider be false as default\n          rideData.hits.hit.forEach((ride) => {\n            if (ride.fields.category === 'attraction' && ride.fields.hide_in_app !== 'false') {\n              if (ride.fields.alternateid && ride.fields.alternateid.indexOf('singlerider')) {\n                singlerider = 'true'; // Initial single rider implementation\n              } else {\n                singlerider = 'false';\n              }\n              // Split the language specific part out\n              const ids = ride.id;\n              const idSplit = ids.split('-');\n              const id = idSplit[0];\n              // Split latlon\n              const latlon = ride.fields.latlon;\n              const latlonSplit = latlon.split(',');\n              const lat = latlonSplit[0];\n              const lon = latlonSplit[1];\n\n              // Poi Object\n              poi[id] = {\n                name: ride.fields.name,\n                id: id,\n                waitTime: null,\n                state: null,\n                active: null,\n                location: {\n                  latitude: lat,\n                  longitude: lon,\n                },\n                meta: {\n                  single_rider: singlerider,\n                  type: ride.fields.category,\n                  area: ride.fields.empire,\n                },\n              };\n            }\n          });\n          fs.writeFile('./data/parks/efteling/efteling_pois.json', JSON.stringify(poi, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          fs.writeFile('./data/parks/efteling/efteling_poi_mock.json', JSON.stringify(rideData.hits.hit, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          return Promise.resolve(poi);\n        });\n  }\n\n  /**\n  * Get Efteling QueueTimes data\n  * This data contains the queue data, we'll assign them to the earlier fetched pois\n  * @return {string} All Efteling POIS with queuetimes\n  */\n  async getQueue() {\n    return await this.getPOIS().then((rideData) => fetch(this.waitTimesURL,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const rides = [];\n          // Park is closed, and nothing is returned, attach that here.\n          if (!json.AttractionInfo.length) {\n            Object.keys(rideData).forEach((ride) => {\n            // Update the variables to the closed rides\n              rideData[ride].waitTime = '0';\n              rideData[ride].state = 'Closed';\n              rideData[ride].active = 'false';\n              // Create the ride Object\n              const rideobj = {\n                name: rideData[ride].name,\n                id: rideData[ride].id,\n                waitTime: rideData[ride].waitTime,\n                state: rideData[ride].state,\n                active: rideData[ride].active,\n                location: {\n                  latitude: rideData[ride].location.latitude,\n                  longitude: rideData[ride].location.longitude,\n                },\n                meta: {\n                  type: rideData[ride].meta.type,\n                  area: rideData[ride].meta.area,\n                  single_rider: rideData[ride].meta.single_rider,\n                },\n              };\n              rides.push(rideobj);\n            });\n\n            return Promise.resolve(rides);\n          }\n\n          // If there are rides listed, fetch them here.\n          json.AttractionInfo.forEach((ridetime) => {\n          /* let id = ridetime.id;\n          let waittime = ridetime.waitingtime;\n          let state = ridetime.state;\n        Object.keys(rideData).forEach((ride) => {\n          //Update the variables to the closed rides\n          rideData[ride].waitTime = waittime\n          rideData[ride].state = state\n          rideData[ride].active = active\n          //Create the ride Object\n          let rideobj = {\n            name: rideData[ride].name,\n            id: rideData[ride].id,\n            waitTime: rideData[ride].waitTime,\n            state: rideData[ride].state,\n            active: rideData[ride].active,\n            location: {\n              latitude: rideData[ride].location.latitude,\n              longitude: rideData[ride].location.longitude,\n            },\n            meta: {\n              type: rideData[ride].meta.type,\n              area: rideData[ride].meta.area,\n              single_rider: rideData[ride].meta.single_rider,\n            }\n          }\n          rides.push(rideobj)\n        }) */\n          });\n        }),\n    );\n  };\n\n  /**\n  * Get Efteling Park Hours data\n  * This data contains the hours data, used to display the operating hours of Efteling\n  * @return {string} All Efteling Operating Hours for 1mo\n  */\n  async getOpHours() {\n    const currentYear = moment().format('YYYY');\n    const currentMonth = moment().format('MM');\n\n    return fetch(\n        this.histURL +\n        `${currentYear}/${currentMonth}`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          if (!json.OpeningHours.length) {\n          // Park is closed, do nothing but returning today as empty string\n            const hours = {\n              date: moment().format('YYYY-MM-DD'),\n              type: 'Closed',\n              openingTime: moment('23:59', 'HH:mm a').format(),\n              closingTime: moment('23:59', 'HH:mm a').format(),\n              special: [],\n            };\n            Calendar.push(hours);\n          } else {\n          // Return the actual opening hours\n            json.OpeningHours.forEach((cal) => {\n              let date = moment.tz(`${cal.Date}`, 'YYYY-MM-DD', 'Europe/Amsterdam');\n              date = moment(date).format('YYYY-MM-DD');\n              cal.OpeningHours.forEach((cal1) => {\n                let open = moment.tz(`${date}${cal1.Open}`, 'YYYY-MM-DDHH:mm', 'Europe/Amsterdam');\n                open = moment(open).format();\n                let close = moment.tz(`${date}${cal1.Close}`, 'YYYY-MM-DDHH:mm', 'Europe/Amsterdam');\n                close = moment(close).format();\n                const type = 'Operating';\n\n                const hours = {\n                  closingTime: close,\n                  openingTime: open,\n                  type: type,\n                  special: [],\n                  date: date,\n                };\n                Calendar.push(hours);\n              });\n            });\n          };\n          return Promise.resolve(Calendar);\n        });\n  }\n\n  /**\n  * Get All Efteling data in console\n  * This data contains all the data of Efteling, returned as json object\n  * @return {string} All Efteling POIS with queuetimes and operating hours\n  */\n  async getData() {\n    return await Promise.all([this.getQueue(), this.getOpHours()]).then((rides) => {\n      console.log(JSON.stringify(rides, null, 4));\n    });\n  }\n\n  /**\n  * Get Efteling Park Hours data in console\n  * This data contains the hours data, used to display the operating hours of Efteling\n  * @return {string} All Efteling Operating Hours\n  */\n  async getCalendar() {\n    return await this.getOpHours().then((calendar) => {\n      console.log(calendar);\n    });\n  }\n\n  /**\n  * Get Efteling Queuetimes data in console\n  * This data contains the queuetimes data, used to display the queuetimes of Efteling\n  * @return {string} All Efteling POIS with QueueTimes\n  */\n  async getWaitTime() {\n    return await this.getQueue().then((rides) => {\n      console.log(rides);\n    });\n  };\n}\n\nexport default Efteling;\n\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/efteling/efteling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Efteling",
    "memberof": "lib/parks/efteling/efteling.js",
    "static": true,
    "longname": "lib/parks/efteling/efteling.js~Efteling",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/efteling/efteling.js",
    "importStyle": "{Efteling}",
    "description": "Efteling Park Object",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#constructor",
    "access": "public",
    "description": "Create a new Efteling Park object",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "name",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#name",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "latutude",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#latutude",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "longitude",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#longitude",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "timezone",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#timezone",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "searchURL",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#searchURL",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "apiKey",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#apiKey",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "waitTimesURL",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#waitTimesURL",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "histURL",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#histURL",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "language",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#language",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getPOIS",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getPOIS",
    "access": "public",
    "description": "Get Efteling POI data<br />This data contains general ride names, descriptions etc.",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS without queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getQueue",
    "access": "public",
    "description": "Get Efteling QueueTimes data<br />This data contains the queue data, we'll assign them to the earlier fetched pois",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS with queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getOpHours",
    "access": "public",
    "description": "Get Efteling Park Hours data<br />This data contains the hours data, used to display the operating hours of Efteling",
    "lineNumber": 194,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling Operating Hours for 1mo"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getData",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getData",
    "access": "public",
    "description": "Get All Efteling data in console<br />This data contains all the data of Efteling, returned as json object",
    "lineNumber": 250,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS with queuetimes and operating hours"
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getCalendar",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getCalendar",
    "access": "public",
    "description": "Get Efteling Park Hours data in console<br />This data contains the hours data, used to display the operating hours of Efteling",
    "lineNumber": 261,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling Operating Hours"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "getWaitTime",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getWaitTime",
    "access": "public",
    "description": "Get Efteling Queuetimes data in console<br />This data contains the queuetimes data, used to display the queuetimes of Efteling",
    "lineNumber": 272,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS with QueueTimes"
    },
    "params": []
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "lib/parks/europapark/europapark.js",
    "content": "import fetch from 'node-fetch';\nimport fs from 'fs';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* EuropaPark Park Object\n*/\nexport class EuropaPark {\n  /**\n   * Create a new EuropaPark Park object\n   * @param {object} options\n   */\n  constructor() {\n    this.name = 'Europa-Park';\n\n    // Setting the parks entrance as latlon\n    this.latutude = 48.266140769976715;\n    this.longitude = 7.722050520358709;\n\n    this.timezone = 'Europe/Berlin';\n\n    this.apiBase = process.env.EUROPAPARK_APIBASE;\n    this.login = process.env.EUROPAPARK_LOGINSTRING;\n    this.loginurl = process.env.EUROPAPARK_LOGIN;\n    this.refresh = process.env.EUROPAPARK_REFRESH;\n\n    this.language = process.env.LANGUAGE;\n\n    if (!this.apiBase) throw new Error('Missing EuropaPark apibase!');\n    if (!this.login) throw new Error('Missing EuropaPark login credentials');\n    if (!this.loginurl) throw new Error('Missing EuropaPark login URL!');\n    if (!this.refresh) throw new Error('Missing EuropaPark refresh url!');\n    if (!this.language) {\n      this.language = 'en';\n    }\n\n    this.langoptions = `{'en', 'fr', 'de'}`;\n  }\n\n  // Load the Europapark poidata\n  // const poidata = ('./data/parks/europapark/europapark_pois.json')\n  // const poimock = ('./data/parks/europapark/europapark_poi_mock.json')\n\n  /**\n  * Login to EuropaPark API\n  * NEVER call this method without calling refresh() or getPOIS()!\n  * @return {string} EuropaPark refresh token\n  */\n  async loginEP() {\n    return fetch(this.apiBase +\n      this.loginurl,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: this.login,\n    },\n    )\n        .then((res) => res.json())\n        .then((login) => {\n          const refreshtoken = {'refresh_token': login.refresh_token};\n          return Promise.resolve(refreshtoken);\n        });\n  }\n\n  /**\n  * Refresh your just obtained ep token\n  * Tokens are 6 hrs valid, however there's no point in just calling this function without queues or sth else\n  * @return {string} EuropaPark JWT Token\n  */\n  async refreshEP() {\n    return await this.loginEP().then((refreshtoken) => fetch(this.apiBase +\n        this.refresh,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(refreshtoken),\n    },\n    )\n        .then((res) => res.json())\n        .then((jwt) => {\n          const jwttoken = 'Bearer ' + jwt.token;\n          return Promise.resolve(jwttoken);\n        }),\n    );\n  };\n\n  /**\n  * Get All POIS of EuropaPark\n  * This data contains all the POIS in EuropaPark\n  */\n  async getPOIS() {\n    const jwttoken = await this.refreshEP();\n\n    return fetch(this.apiBase +\n      `pois/${this.language}`,\n    {\n      headers: {\n        'Content-Type': 'application/json',\n        'JWTAuthorization': jwttoken,\n      },\n    },\n    )\n        .then((res) => res.json())\n        .then((rideData) => {\n          const poi = {};\n          rideData.pois.forEach((ride) => {\n            if (ride.type === 'attraction' && ride.code !== null) { // Return rides and pois which haven't null\n              if (ride.name.indexOf('Queue - ') === 0) return; // Ignore the Queue Pointers\n              let area = 'Germany'; // Really, this is the strangest empire thing ever\n              if (ride.areaId == 26) {\n                area = 'Switzerland';\n              }\n              poi[ride.code] = {\n                name: ride.name,\n                id: 'Europapark_' + ride.code,\n                waitTime: null,\n                state: null,\n                active: null,\n                location: {\n                  latitude: ride.latitude,\n                  longitude: ride.longitude,\n                },\n                meta: {\n                  area: area,\n                  type: ride.type,\n                  single_rider: 'false',\n                },\n              };\n            };\n          });\n          fs.writeFile('./data/parks/europapark/europapark_pois.json', JSON.stringify(poi, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          fs.writeFile('./data/parks/europapark/europapark_poi_mock.json', JSON.stringify(rideData.pois, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          return Promise.resolve(poi);\n        });\n  };\n\n  /**\n  * Get All Queues of EuropaPark\n  * This data contains all the Queues in EuropaPark, attached with pois above.\n  */\n  async getQueue() {\n    const token = await this.refreshEP();\n    const rideData = await this.getPOIS();\n\n    return fetch(this.apiBase +\n      `waitingtimes`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'JWTAuthorization': token,\n      },\n    },\n    )\n        .then((res) => res.json())\n        .then((poiData) => {\n          const rides = [];\n          poiData.waitingtimes.forEach((ridetime) => {\n            if (ridetime.code) {\n            // Declare default for rides that doesn't fetch right now\n              let waitTime = '0';\n              let state = 'Closed';\n              let active = 'false';\n\n              if (ridetime.time > 0 && ridetime.time < 91) {\n                waitTime = ridetime.time;\n                state = 'Operating';\n                active = 'true';\n              } else if (ridetime.time === 91) {\n                waitTime = 91;\n                state = 'Operating';\n                active = 'true';\n              } else if (ridetime.time === 333 || ridetime.time === 666 || ridetime.time === 777) {\n                waitTime = 0;\n                state = 'Closed';\n                active = 'false';\n              } else if (ridetime.status === 444 || ridetime.time === 555 || ridetime.time === 999) {\n                waitTime = 0;\n                state = 'Down';\n                active = 'false';\n              } else if (ridetime.time === 222) {\n                waitTime = 0;\n                state = 'Refurbishment';\n                active = 'false';\n              }\n\n              if (rideData[ridetime.code]) { // Skip null variables\n                Object.keys(rideData[ridetime.code]).forEach((k) => {\n                  if (k === 'waitTime') {\n                    rideData[ridetime.code].waitTime = waitTime;\n                  } else if (k === 'state') {\n                    rideData[ridetime.code].state = state;\n                  } else if (k === 'active') {\n                    rideData[ridetime.code].active = active;\n                  }\n\n                  const rideobj = {\n                    name: rideData[ridetime.code].name,\n                    id: rideData[ridetime.code].id,\n                    waitTime: rideData[ridetime.code].waitTime,\n                    state: rideData[ridetime.code].state,\n                    active: rideData[ridetime.code].active,\n                    location: {\n                      latitude: rideData[ridetime.code].location.latitude,\n                      longitude: rideData[ridetime.code].location.longitude,\n                    },\n                    meta: {\n                      type: rideData[ridetime.code].meta.type,\n                      area: rideData[ridetime.code].meta.area,\n                    },\n                  };\n                  rides.push(rideobj);\n                });\n              }\n\n              return Promise.resolve(rides);\n            }\n          });\n        });\n  };\n\n  /**\n  * Get All Operating Hours of EuropaPark\n  * This data contains all the Operating Hours in EuropaPark, fetched with currentyear.\n  */\n  async getOpHours() {\n    return fetch(\n        this.apiBase +\n          `europapark/opentime/`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          // Execute Calendar stuff here\n          return Promise.resolve(Calendar);\n        });\n  }\n\n  /**\n  * Get All Data of EuropaPark\n  * This data contains all EP's data, which is fetched earlier\n  */\n  async getData() {\n    return await Promise.all([this.getPOIS(), this.getOpHours()]).then((rides) => {\n      console.log(JSON.stringify(rides, null, 4));\n    });\n  }\n\n  /**\n  * Get All Calendar Data of EuropaPark\n  * This data contains all the calendar data of EuropaPark\n  */\n  async getCalendar() {\n    return await this.getOpHours().then((calendar) => {\n      console.log(calendar);\n    });\n  }\n\n  /**\n  * Get All Queues of EuropaPark\n  * This data contains all the Queues in EuropaPark\n  */\n  async getWaitTime() {\n    return await this.getPOIS().then((rides) => {\n      console.log(rides);\n    });\n  }\n};\n\nexport default EuropaPark;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/europapark/europapark.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "EuropaPark",
    "memberof": "lib/parks/europapark/europapark.js",
    "static": true,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/europapark/europapark.js",
    "importStyle": "{EuropaPark}",
    "description": "EuropaPark Park Object",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#constructor",
    "access": "public",
    "description": "Create a new EuropaPark Park object",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "name",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#name",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "latutude",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#latutude",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "longitude",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#longitude",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "timezone",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#timezone",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "apiBase",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#apiBase",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "login",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#login",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "loginurl",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#loginurl",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "refresh",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#refresh",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "language",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#language",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "langoptions",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#langoptions",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "loginEP",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#loginEP",
    "access": "public",
    "description": "Login to EuropaPark API<br />NEVER call this method without calling refresh() or getPOIS()!",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EuropaPark refresh token"
    },
    "params": []
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "refreshEP",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#refreshEP",
    "access": "public",
    "description": "Refresh your just obtained ep token<br />Tokens are 6 hrs valid, however there's no point in just calling this function without queues or sth else",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EuropaPark JWT Token"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getPOIS",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getPOIS",
    "access": "public",
    "description": "Get All POIS of EuropaPark<br />This data contains all the POIS in EuropaPark",
    "lineNumber": 97,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getQueue",
    "access": "public",
    "description": "Get All Queues of EuropaPark<br />This data contains all the Queues in EuropaPark, attached with pois above.",
    "lineNumber": 151,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getOpHours",
    "access": "public",
    "description": "Get All Operating Hours of EuropaPark<br />This data contains all the Operating Hours in EuropaPark, fetched with currentyear.",
    "lineNumber": 236,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getData",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getData",
    "access": "public",
    "description": "Get All Data of EuropaPark<br />This data contains all EP's data, which is fetched earlier",
    "lineNumber": 256,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getCalendar",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getCalendar",
    "access": "public",
    "description": "Get All Calendar Data of EuropaPark<br />This data contains all the calendar data of EuropaPark",
    "lineNumber": 266,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "getWaitTime",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getWaitTime",
    "access": "public",
    "description": "Get All Queues of EuropaPark<br />This data contains all the Queues in EuropaPark",
    "lineNumber": 276,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "lib/parks/index.js",
    "content": "/**\n* Import all the parks included in the library\n*/\n// Efteling\nimport Efteling from './efteling/efteling.js';\n// Compagnie des Alpes\nimport WalibiHolland from './walibi/walibiholland.js';\n// EuropaPark\nimport EuropaPark from './europapark/europapark.js';\n\n/**\n* Export all parks as string\n*/\nexport default {\n  parks: {\n    // Efteling\n    Efteling,\n    // Compagnie des Alpes\n    WalibiHolland,\n    // EuropaPark\n    EuropaPark,\n  },\n  allParks: [\n    // Efteling\n    Efteling,\n    // Compagnie des Alpes\n    WalibiHolland,\n    // Europa-Park\n    EuropaPark,\n  ],\n};\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "lib/parks/walibi/walibiholland.js",
    "content": "import moment from 'moment-timezone';\nimport fetch from 'node-fetch';\nimport fs from 'fs';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* Walibi Holland Park Object\n*/\nexport class WalibiHolland {\n  /**\n   * Create a new WalibiHolland Park object\n   * @param {object} options\n   */\n  constructor() {\n    this.name = 'Walibi Holland';\n\n    // I'll just use their fountain at the entrance for this\n    this.latutude = 52.4390338;\n    this.longitude = 5.7665651;\n\n    this.timezone = 'Europe/Amsterdam';\n\n    this.apiUrl = process.env.WALIBIHOLLAND_APIURL;\n    this.apiBase = process.env.WALIBIHOLLAND_APIBASE;\n\n    this.language = process.env.LANGUAGE;\n\n    if (!this.apiUrl) throw new Error('Missing Walibi Holland search url!');\n    if (!this.apiBase) throw new Error('Missing Walibi Holland api base!');\n    if (!this.language) {\n      this.language = 'en';\n    }\n  }\n\n  // Load the Walibi Holland poidata\n  // const poidata = ('./data/parks/walibi/walibiholland_pois.json')\n  // const poimock = ('./data/parks/walibi/walibiholland_poi_mock.json')\n\n  /**\n  * Get All POIS of Walibi Holland\n  * This data contains all the POIS in Walibi Holland, limited to their fast-lane services\n  */\n  async getPOIS() {\n    return fetch(this.apiUrl,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((rideData) => {\n          const poi = [];\n          rideData.forEach((ride) => {\n            let waitTime = '0';\n            let state = 'Closed';\n            let active = 'false';\n            if (ride.name !== 'Dummy1') { // They have a dummy ride to sell single shots in their fast-lane, mind=blown\n              if (ride.useVirtualQueue == 'true') { // VirtQueue enabled\n                waitTime = Math.round(ride.waitTimeMins); // Stupid API serves random numbers like 0.00010358, let's round them.\n              } else { // No virtQueue found, use the normal queue instead\n                waitTime = ride.minWait / 60; // Walibi has some calculation issues or sth so divide our result by 60\n              }\n              if (ride.state === 'closed_indefinitely') { // Closed but not closed but still closed\n                state = 'Closed';\n                active = 'false';\n              } // Declare other states when park reopens\n              // POI Object with queues\n              const poiData = {\n                name: ride.name,\n                id: ride.shortId,\n                state: state,\n                active: active,\n                waitTime: waitTime,\n                meta: {\n                  type: 'attraction',\n                },\n              };\n              poi.push(poiData);\n            }\n          });\n          fs.writeFile('./data/parks/walibi/walibiholland_pois.json', JSON.stringify(poi, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          fs.writeFile('./data/parks/walibi/walibiholland_poi_mock.json', JSON.stringify(rideData, null, 4), function(err) {\n            if (err) return console.log(err);\n          });\n          return Promise.resolve(poi); // Although we saved them in a json file, we'll just return them for the queue attach function which will run next if you called getQueue()\n        });\n  }\n\n  /**\n  * Get All Operating Hours of Walibi Holland\n  * This data contains all the Operating Hours in Walibi Holland, fetched with currentyear.\n  */\n  async getOpHours() {\n    const currentYear = moment().format('YYYY');\n    return fetch(\n        this.apiBase +\n          `/calendar/${currentYear}?_format=json`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          // Execute Calendar stuff here\n          return Promise.resolve(Calendar);\n        });\n  }\n\n  /**\n  * Get All Data of Walibi Holland\n  * This data contains all Walibi's data, which is fetched earlier\n  */\n  async getData() {\n    return await Promise.all([this.getPOIS(), this.getOpHours()]).then((rides) => {\n      console.log(JSON.stringify(rides, null, 4));\n    });\n  }\n\n  /**\n  * Get All Calendar Data of Walibi Holland\n  * This data contains all the calendar data of Walibi Holland\n  */\n  async getCalendar() {\n    return await this.getOpHours().then((calendar) => {\n      console.log(calendar);\n    });\n  }\n\n  /**\n  * Get All Queues of Walibi Holland\n  * This data contains all the Queues in Walibi Holland, limited to their fast-lane services\n  */\n  async getWaitTime() {\n    return await this.getPOIS().then((rides) => {\n      console.log(rides);\n    });\n  }\n};\n\nexport default WalibiHolland;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/walibi/walibiholland.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "WalibiHolland",
    "memberof": "lib/parks/walibi/walibiholland.js",
    "static": true,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/walibi/walibiholland.js",
    "importStyle": "{WalibiHolland}",
    "description": "Walibi Holland Park Object",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#constructor",
    "access": "public",
    "description": "Create a new WalibiHolland Park object",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "name",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#name",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "latutude",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#latutude",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "longitude",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#longitude",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "timezone",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#timezone",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "apiUrl",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#apiUrl",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "apiBase",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#apiBase",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "language",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#language",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getPOIS",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getPOIS",
    "access": "public",
    "description": "Get All POIS of Walibi Holland<br />This data contains all the POIS in Walibi Holland, limited to their fast-lane services",
    "lineNumber": 45,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getOpHours",
    "access": "public",
    "description": "Get All Operating Hours of Walibi Holland<br />This data contains all the Operating Hours in Walibi Holland, fetched with currentyear.",
    "lineNumber": 96,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "getData",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getData",
    "access": "public",
    "description": "Get All Data of Walibi Holland<br />This data contains all Walibi's data, which is fetched earlier",
    "lineNumber": 117,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getCalendar",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getCalendar",
    "access": "public",
    "description": "Get All Calendar Data of Walibi Holland<br />This data contains all the calendar data of Walibi Holland",
    "lineNumber": 127,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "getWaitTime",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getWaitTime",
    "access": "public",
    "description": "Get All Queues of Walibi Holland<br />This data contains all the Queues in Walibi Holland, limited to their fast-lane services",
    "lineNumber": 137,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Themeparks-API\nThemeparks API loosely based on existing examples, however I wanted to kill some time and then this came up. Don't expect anything too cool tho.\n[API documentation](https://alexvv13.github.io/tp-api \"API Documentation\")\nCurrent Version: 1.0.4\n\n## About\nThis is a module which fetches queue times and operating hours, and returns it as JSON to the user, the data could be used for anything, a website, a discordjs bot, some personal stuff or whatever. Be aware it's not perfect, but it works. It's just being build to work and return data, not to be efficient anyway.\n\n## Table of Contents\n[About](#about)</br>\n[Table of Contents](#table-of-contents)</br>\n[Requirements](#requirements)</br>\n[  -Applications](#applications)</br>\n[  -Node Modules](#node-modules)</br>\n[  -Other](#other)</br>\n[Setup](#setup)</br>\n[  -Dependencies](#dependencies)</br>\n[  -ENV](#env)</br>\n[Usage](#usage)</br>\n[  -Viewing](#viewing)</br>\n[Park List](#currently-working-parks)</br>\n[Tasks](#tasks)</br>\n\n## Requirements\n### Applications\n- Git\n- Latest version of Nodejs\n- Other applications are dependent on whatever you want.\n\n### Node Modules\n- All included in package.json\n\n### Other\n- A working pc perhaps\n\n## Setup\n### Clone the repository\nFirst, clone the repository\n``` \n$ npm i @alexvv13/tpapi\n``` \nNow the repository is cloned in your document root, install the dependencies now\n### Dependencies\nFirst, install the dependencies, this can be easily achieved by running npm:</br>\n``` \n$ npm i\n``` \n### ENV\nAfter that, fill in the .env fields, using some research this could be an easy task. \n\n## Usage\n### Running the script\nRun index.js for all parks </br>\nOr create an .js file for yourself and do the following: </br>\n```javascript\n// Import all parks here\nimport tpapi from '@alexvv13/tpapi'; // Or use require: const tpapi = require('@alexvv13/tpapi');\n\nconst park = new tpapi.parks.EuropaPark(); \n\n// Fetch POIS\npark.getWaitTime(); // Fetch the queues for, in this example, EuropaPark\n```\n   \n## Currently Working Parks\nPark Name | Live Queues | Park Hours\n------------ | ------------- | ----------\nEfteling |:heavy_check_mark:|:heavy_check_mark:\nWalibi Holland |:heavy_check_mark:|:heavy_multiplication_x:\nEuropa-Park |:heavy_check_mark:|:heavy_multiplication_x:\n\n## Tasks\n- [ ] Add more parks\n- [ ] Multi language support\n- [ ] Multiple Queue entities support\n\n\n",
    "longname": "/home/runner/work/tp-api/tp-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@alexvv13/tpapi\",\n  \"version\": \"1.0.4\",\n  \"type\": \"module\",\n  \"description\": \"Api to fetch themepark data, such as queues, operating hours etc\",\n  \"engines\": {\n    \"npm\": \">=6\",\n    \"node\": \">=14\"\n  },\n  \"main\": \"lib/parks/index.js\",\n  \"dependencies\": {\n    \"dotenv\": \"^8.2.0\",\n    \"esm\": \"^3.2.25\",\n    \"file-system\": \"^2.2.2\",\n    \"moment-timezone\": \"^0.5.32\",\n    \"node-fetch\": \"^2.6.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/traverse\": \"^7.11.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.15.0\",\n    \"eslint-config-google\": \"^0.14.0\",\n    \"eslint-config-prettier\": \"^7.0.0\",\n    \"eslint-plugin-mocha\": \"^8.0.0\",\n    \"eslint-plugin-prettier\": \"^3.3.0\"\n  },\n  \"scripts\": {\n    \"test\": \"eslint ./lib/**\",\n    \"docs\": \"esdoc\"\n  },\n  \"exports\": {\n    \".\": \"./lib/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/AlexVV13/tp-api.git\"\n  },\n  \"keywords\": [\n    \"Api\",\n    \"themeparks\",\n    \"queue\",\n    \"calendar\"\n  ],\n  \"author\": \"Alex_VV\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/AlexVV13/tp-api/issues\"\n  },\n  \"homepage\": \"https://github.com/AlexVV13/tp-api#readme\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  }\n}\n",
    "longname": "/home/runner/work/tp-api/tp-api/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]