[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/cache/cacheBase.js",
    "content": "/**\n * Our base Cache implementation\n * Extend this class with new implementations to create different cache types (in-memory, database, file system etc.)\n * @class\n */\nexport default class CacheBase {\n  /**\n     * @param {Object} options\n     * @param {boolean} [options.useMemoryCache=true] Use an in-memory layer on top of this cache\n     *  Avoid hitting databases too often\n     *  Not useful if using any distributed setup where memory will be out-of-sync between processes\n     * @param {(number|null)} [options.memoryCacheTimeout=null] Timeout for in-memory cache values\n     *  Default is null, which will use the incoming ttl values for each key\n     */\n  constructor(options = {\n    useMemoryCache: true,\n    memoryCacheTimeout: null,\n  }) {\n    this.memoryLayerEnabled = options.useMemoryCache;\n    this.memCache = {};\n\n    // stack up multiple cache wraps so they wait for a single request to finish\n    this.pendingCacheWraps = {};\n\n    this.failedCacheWraps = {};\n  }\n\n  /**\n     * Internal implementation of Get()\n     * @param {string} key Unique key name for this cache entry\n     * @return {(Object|undefined)} Returns the object in the cache, or undefined if not present\n     * @abstract\n     * @private\n     */\n  async _get(key) {\n    throw new Error('Missing Implementation CacheBase::_get(key)');\n  }\n\n  /**\n     * Internal implementation of Set()\n     * @param {string} key Unique key name for this cache entry\n     * @param {Object} object Data to be set\n     * @abstract\n     * @private\n     */\n  async _set(key, object) {\n    throw new Error('Missing Implementation CacheBase::_set(key, object)');\n  }\n\n  /**\n     * Internal operation to delete a key\n     * @param {string} key Key name to delete\n     * @abstract\n     * @private\n     */\n  async _del(key) {\n    throw new Error('Missing Implementation CacheBase::_del(key)');\n  }\n\n  /**\n     * Internal implementation of getKeys()\n     * @param {string} prefix\n     * @abstract\n     * @private\n     */\n  async _getKeys(prefix) {\n    throw new Error('Missing Implementation CacheBase::_getKeys(prefix)');\n  }\n\n  /**\n     * Get a cached object\n     * @param {string} key Unique key name for this cache entry\n     * @param {boolean} [getFullObject] Get the full cache entry, including expiry time, even if expired\n     * @return {(Object|undefined)} Returns the object in the cache, or undefined if not present\n     */\n  async get(key, getFullObject = false) {\n    const now = +new Date();\n\n    // our optional in-memory cache goes first\n    if (this.memoryLayerEnabled) {\n      const cacheEntry = this.memCache[key];\n      if (cacheEntry !== undefined) {\n        if (getFullObject) {\n          return cacheEntry;\n        }\n\n        if (cacheEntry.expires >= now) {\n          return cacheEntry.value;\n        }\n      }\n    }\n\n    // then use our internal cache if we haven't got the value stored locally\n    const cacheValue = await this._get(key);\n    if (cacheValue !== undefined) {\n      if (getFullObject) {\n        return cacheValue;\n      }\n\n      if (cacheValue.expires >= now) {\n        return cacheValue.value;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Set a key in our cache\n     * @param {string} key Unique key name for this cache entry\n     * @param {Object} value\n     * @param {(Function|number)} [ttl=3600000] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     *  Default 1 hour\n     */\n  async set(key, value, ttl = 3600000) {\n    // resolve our cache time\n    let cacheTime = ttl;\n    // if our cache time input is a function, resolve it and store the result (in milliseconds)\n    if (typeof cacheTime === 'function') {\n      cacheTime = await cacheTime();\n    }\n\n    // optionally keep an in-memory cache layer\n    if (this.memoryLayerEnabled) {\n      const memoryCacheTime = this.memoryCacheTimeout === null ?\n          cacheTime :\n          (Math.min(this.memoryCacheTimeout, cacheTime)\n          );\n      if (memoryCacheTime < 0) {\n        if (this.memCache[key]) {\n          delete this.memCache[key];\n        }\n      } else {\n        this.memCache[key] = {\n          value,\n          expires: (+new Date()) + memoryCacheTime,\n        };\n      }\n    }\n\n    if (cacheTime < 0) {\n      // delete key if ttl is negative\n      await this._del(key);\n    } else {\n      // call the private _Set implementation to actually set the key\n      this._set(key, {\n        value,\n        expires: (+new Date()) + cacheTime,\n      });\n    }\n  }\n\n  /**\n     * A helper \"wrap\" function that will return a cached value if present\n     *  This will call the supplied function to fetch it if the value isn't present in the cache\n     * @param {string} key Unique key name for this cache entry\n     * @param {function} fn Fetch function that will be called if the cache entry is not present\n     * @param {(function|number)} [ttl] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     */\n  async wrap(key, fn, ttl) {\n    // if another system is already wrapping this key, return it's pending Promise\n    if (this.pendingCacheWraps[key] !== undefined) {\n      return this.pendingCacheWraps[key];\n    }\n\n    // wrap all await calls in another Promise that we store\n    //  this allows multiple calls to Wrap to stack up, and they all get the same result\n    this.pendingCacheWraps[key] = new Promise(async (resolve) => {\n      // try and fetch the cached value\n      const cachedValue = await this.get(key, true);\n\n      // if not in our cache, call the supplied fetcher function\n      if (cachedValue !== undefined) {\n        // check timestamp to see if value is still valid\n        const now = +new Date();\n        if (cachedValue.expires > now) {\n          // it is! return it!\n          return resolve(cachedValue.value);\n        }\n        // it isn't! fall through and run our wrap function to get new data\n      }\n\n      let error = null;\n      try {\n        const newValue = await fn();\n\n        // set the new value in our cache\n        this.failedCacheWraps[key] = 0;\n        await this.set(key, newValue, ttl);\n        return resolve(newValue);\n      } catch (e) {\n        // store in case we want to throw this later\n        error = e;\n        console.error(`Error caching value ${key}`, e);\n      }\n\n      if (this.failedCacheWraps[key] === undefined) {\n        this.failedCacheWraps[key] = 0;\n      }\n      this.failedCacheWraps[key]++;\n\n      // failed! store old data briefly, then return old data back\n      await this.set(key, cachedValue?.value, 1000 * 30); // try again in 30 seconds\n      if (this.failedCacheWraps[key] > 5) {\n        // report after multiple failures\n        if (error !== null) {\n          // throw the actual error if we had one\n          throw error;\n        }\n        throw new Error(`Failed to resolve wrap function for cache key ${key}`);\n      }\n      return resolve(cachedValue?.value);\n    });\n    const cachedValue = await this.pendingCacheWraps[key];\n    this.pendingCacheWraps[key] = undefined;\n\n    // return the fetched or calculated value\n    return cachedValue;\n  }\n\n  /**\n   * Get an array of all the cached keys matching the supplied prefix\n   * @param {string} [prefix='']\n   * @return {array<string>}\n   */\n  async getKeys(prefix = '') {\n    return this._getKeys(prefix);\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/cache/cacheBase.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CacheBase",
    "memberof": "lib/cache/cacheBase.js",
    "static": true,
    "longname": "lib/cache/cacheBase.js~CacheBase",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/cache/cacheBase.js",
    "importStyle": "CacheBase",
    "description": "Our base Cache implementation<br />Extend this class with new implementations to create different cache types (in-memory, database, file system etc.)",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.useMemoryCache",
        "description": "Use an in-memory layer on top of this cache\n Avoid hitting databases too often\n Not useful if using any distributed setup where memory will be out-of-sync between processes"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options.memoryCacheTimeout",
        "description": "Timeout for in-memory cache values\n Default is null, which will use the incoming ttl values for each key"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "memoryLayerEnabled",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#memoryLayerEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "memCache",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#memCache",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "pendingCacheWraps",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#pendingCacheWraps",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "failedCacheWraps",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#failedCacheWraps",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "_get",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#_get",
    "access": "private",
    "description": "Internal implementation of Get()",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Returns the object in the cache, or undefined if not present"
    },
    "abstract": true
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "_set",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#_set",
    "access": "private",
    "description": "Internal implementation of Set()",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Data to be set"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_del",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#_del",
    "access": "private",
    "description": "Internal operation to delete a key",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Key name to delete"
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "_getKeys",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#_getKeys",
    "access": "private",
    "description": "Internal implementation of getKeys()",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      }
    ],
    "abstract": true,
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "get",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#get",
    "access": "public",
    "description": "Get a cached object",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "getFullObject",
        "description": "Get the full cache entry, including expiry time, even if expired"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Returns the object in the cache, or undefined if not present"
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "set",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#set",
    "access": "public",
    "description": "Set a key in our cache",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3600000",
        "defaultRaw": 3600000,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number\n Default 1 hour"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "wrap",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#wrap",
    "access": "public",
    "description": "A helper \"wrap\" function that will return a cached value if present<br /> This will call the supplied function to fetch it if the value isn't present in the cache",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Fetch function that will be called if the cache entry is not present"
      },
      {
        "nullable": null,
        "types": [
          "function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getKeys",
    "memberof": "lib/cache/cacheBase.js~CacheBase",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheBase.js~CacheBase#getKeys",
    "access": "public",
    "description": "Get an array of all the cached keys matching the supplied prefix",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "prefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "lib/cache/cacheLevel.js",
    "content": "import CacheBase from './cacheBase.js';\nimport level from 'level';\nimport path from 'path';\n\n/**\n * A cache implementation using LevelDown\n * @extends CacheBase\n * @class\n */\nexport default class CacheLevel extends CacheBase {\n  /**\n   * Create new Memory cache object\n   * @param {object} options\n   */\n  constructor(options = {}) {\n    options.useMemoryCache = false;\n\n    super(options);\n\n    // setup our Level database\n    this.db = level(path.join(process.cwd(), 'db.cache'));\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _get(key) {\n    try {\n      const cacheEntry = await this.db.get(key);\n      if (cacheEntry !== undefined) {\n        return JSON.parse(cacheEntry);\n      }\n    } catch (err) {\n      // ignore NotFoundError, throw any other errors back up the chain\n      if (err.name !== 'NotFoundError') {\n        throw err;\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _set(key, object) {\n    await this.db.put(key, JSON.stringify(object));\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _del(key) {\n    await this.db.del(key);\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _getKeys(prefix) {\n    return new Promise((resolve) => {\n      const keys = [];\n      const keyStream = this.db.createKeyStream();\n      keyStream.on('data', (data) => {\n        if (data.indexOf(prefix) === 0) {\n          keys.push(data);\n        }\n      });\n      keyStream.on('end', () => {\n        return resolve(keys);\n      });\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/cache/cacheLevel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "CacheLevel",
    "memberof": "lib/cache/cacheLevel.js",
    "static": true,
    "longname": "lib/cache/cacheLevel.js~CacheLevel",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/cache/cacheLevel.js",
    "importStyle": "CacheLevel",
    "description": "A cache implementation using LevelDown",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#constructor",
    "access": "public",
    "description": "Create new Memory cache object",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "db",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#db",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_get",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#_get",
    "access": "private",
    "description": "",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "_set",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#_set",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_del",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#_del",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_getKeys",
    "memberof": "lib/cache/cacheLevel.js~CacheLevel",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheLevel.js~CacheLevel#_getKeys",
    "access": "private",
    "description": "",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "lib/cache/cacheMemory.js",
    "content": "import CacheBase from './cacheBase.js';\n\n/**\n * A basic in-memory cache implementation\n * @extends CacheBase\n * @class\n */\nexport default class CacheMemory extends CacheBase {\n  /**\n   * Create new Memory cache object\n   * @param {object} options\n   */\n  constructor(options) {\n    // disable our internal memory cache, since this is exactly what this implementation is already doing\n    options.useMemoryCache = false;\n\n    super(options);\n\n    this.cache = {};\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _get(key) {\n    const cacheEntry = this.cache[key];\n    if (cacheEntry !== undefined) {\n      return cacheEntry;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _set(key, object) {\n    this.cache[key] = object;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _del(key) {\n    if (this.cache[key]) {\n      delete this.cache[key];\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  async _getKeys(prefix) {\n    return Object.keys(this.cache).filter((key) => {\n      return key.indexOf(prefix) === 0;\n    });\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/cache/cacheMemory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "CacheMemory",
    "memberof": "lib/cache/cacheMemory.js",
    "static": true,
    "longname": "lib/cache/cacheMemory.js~CacheMemory",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/cache/cacheMemory.js",
    "importStyle": "CacheMemory",
    "description": "A basic in-memory cache implementation",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#constructor",
    "access": "public",
    "description": "Create new Memory cache object",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "cache",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#cache",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_get",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#_get",
    "access": "private",
    "description": "",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_set",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#_set",
    "access": "private",
    "description": "",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_del",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#_del",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_getKeys",
    "memberof": "lib/cache/cacheMemory.js~CacheMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/cacheMemory.js~CacheMemory#_getKeys",
    "access": "private",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@inheritdoc",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "lib/cache/scopedCache.js",
    "content": "import {getCache} from '../cache.js';\nimport {reusePromiseForever} from '../reusePromises.js';\n\n/**\n * A wrapper class for accessing the cache.\n * Prefixes a string before each key to avoid conflicts.\n */\nexport class ScopedCache {\n  /**\n   * Create a new ScopedCache object by passing in the key prefix descired\n   * @param {string} keyPrefix\n   * @param {number} [version] Cache version, bump this to invalidate existing cache entries for a scope\n   */\n  constructor(keyPrefix, version = 0) {\n    this.prefix = keyPrefix;\n    this.version = version;\n\n    this.cache = null;\n  }\n\n  /**\n   * Initialise the cache for this scope\n   */\n  async initCache() {\n    return await reusePromiseForever(this, this._initCache);\n  }\n\n  /**\n   * Internal cache initialisation\n   */\n  async _initCache() {\n    if (this.cache) {\n      return this.cache;\n    }\n\n    this.cache = await getCache();\n\n    // check and flush cache if version mismatch\n    const cacheVersion = await this.cache.get(this.generateScopedKey('%%version%%'));\n    if (cacheVersion !== undefined && cacheVersion != this.version) {\n      // find all cache entries with this scope, and remove them\n      const keys = await this.cache.getKeys(`${this.prefix}_`);\n\n      await Promise.allSettled(keys.map((key) => {\n        // set expire date to 1 millisecond ago (this basically deletes it)\n        return this.cache.setGlobal(key, {}, -1);\n      }));\n    }\n\n    // set our new cache version with a very very long ttl\n    await this.cache.set('%%version%%', this.generateScopedKey(this.version), Number.MAX_SAFE_INTEGER);\n    this._initCachePromise = null;\n\n    return this.cache;\n  }\n\n  /**\n   * Generate a scoped key by adding our prefix to the incoming key\n   * @param {string} inKey\n   * @return {string} Scoped key\n   */\n  generateScopedKey(inKey) {\n    return `${this.prefix}_${inKey}`;\n  }\n\n  /**\n     * Get a cached object\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @return {(Object|undefined)} Returns the object in the cache, or undefined if not present\n     */\n  async get(key) {\n    return this.getGlobal(this.generateScopedKey(key));\n  }\n\n  /**\n     * Get a cached object from the global cache (skipping the scope prefix)\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @return {(Object|undefined)} Returns the object in the cache, or undefined if not present\n     */\n  async getGlobal(key) {\n    const cache = await this.initCache();\n    return cache.get(key);\n  }\n\n  /**\n     * Set a key in our cache\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @param {Object} value\n     * @param {(Function|number)} [ttl=3600000] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     *  Default 1 hour\n     */\n  async set(key, value, ttl = 3600000) {\n    return this.setGlobal(this.generateScopedKey(key), value, ttl);\n  }\n\n  /**\n     * Set a key in our global cache, skipping the scoped prefix\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @param {Object} value\n     * @param {(Function|number)} [ttl=3600000] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     *  Default 1 hour\n     */\n  async setGlobal(key, value, ttl = 3600000) {\n    const cache = await this.initCache();\n    return cache.set(key, value, ttl);\n  }\n\n  /**\n     * A helper \"wrap\" function that will return a cached value if present\n     *  This will call the supplied function to fetch it if the value isn't present in the cache\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @param {function} fn Fetch function that will be called if the cache entry is not present\n     * @param {(function|number)} [ttl] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     */\n  async wrap(key, fn, ttl) {\n    return this.wrapGlobal(this.generateScopedKey(key), fn, ttl);\n  }\n\n  /**\n     * A helper \"wrap\" function that will return a cached value if present (in the global scope)\n     *  This will call the supplied function to fetch it if the value isn't present in the cache\n     * @public\n     * @async\n     * @param {string} key Unique key name for this cache entry\n     * @param {function} fn Fetch function that will be called if the cache entry is not present\n     * @param {(function|number)} [ttl] How long the cache entry should last in milliseconds\n     *  Can be a number or a function that will return a number\n     */\n  async wrapGlobal(key, fn, ttl) {\n    const cache = await this.initCache();\n    return cache.wrap(key, fn, ttl);\n  }\n}\n\nexport default ScopedCache;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/cache/scopedCache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "ScopedCache",
    "memberof": "lib/cache/scopedCache.js",
    "static": true,
    "longname": "lib/cache/scopedCache.js~ScopedCache",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/cache/scopedCache.js",
    "importStyle": "{ScopedCache}",
    "description": "A wrapper class for accessing the cache.<br />Prefixes a string before each key to avoid conflicts.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#constructor",
    "access": "public",
    "description": "Create a new ScopedCache object by passing in the key prefix descired",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyPrefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "Cache version, bump this to invalidate existing cache entries for a scope"
      }
    ]
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "prefix",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#prefix",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "version",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#version",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "cache",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#cache",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "initCache",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#initCache",
    "access": "public",
    "description": "Initialise the cache for this scope",
    "lineNumber": 24,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_initCache",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#_initCache",
    "access": "private",
    "description": "Internal cache initialisation",
    "lineNumber": 31,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_initCachePromise",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#_initCachePromise",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "generateScopedKey",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#generateScopedKey",
    "access": "public",
    "description": "Generate a scoped key by adding our prefix to the incoming key",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "inKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Scoped key"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "get",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#get",
    "access": "public",
    "description": "Get a cached object",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Returns the object in the cache, or undefined if not present"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "getGlobal",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#getGlobal",
    "access": "public",
    "description": "Get a cached object from the global cache (skipping the scope prefix)",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "undefined"
      ],
      "spread": false,
      "description": "Returns the object in the cache, or undefined if not present"
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "set",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#set",
    "access": "public",
    "description": "Set a key in our cache",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3600000",
        "defaultRaw": 3600000,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number\n Default 1 hour"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "setGlobal",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#setGlobal",
    "access": "public",
    "description": "Set a key in our global cache, skipping the scoped prefix",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3600000",
        "defaultRaw": 3600000,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number\n Default 1 hour"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "wrap",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#wrap",
    "access": "public",
    "description": "A helper \"wrap\" function that will return a cached value if present<br /> This will call the supplied function to fetch it if the value isn't present in the cache",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Fetch function that will be called if the cache entry is not present"
      },
      {
        "nullable": null,
        "types": [
          "function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "wrapGlobal",
    "memberof": "lib/cache/scopedCache.js~ScopedCache",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/cache/scopedCache.js~ScopedCache#wrapGlobal",
    "access": "public",
    "description": "A helper \"wrap\" function that will return a cached value if present (in the global scope)<br /> This will call the supplied function to fetch it if the value isn't present in the cache",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique key name for this cache entry"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Fetch function that will be called if the cache entry is not present"
      },
      {
        "nullable": null,
        "types": [
          "function",
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "ttl",
        "description": "How long the cache entry should last in milliseconds\n Can be a number or a function that will return a number"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "lib/cache.js",
    "content": "/**\n * Cache provider for this module.\n * Various cache types are available, we default to using \"leveldown\" via the Level library.\n */\n\nimport CacheLevel from './cache/cacheLevel.js';\n\n// our global cache instance\nlet CacheInstance = null;\n\n/**\n * Create a new Cache Instance.\n * This function should only be called once for the lifetime of the module.\n */\nasync function createCacheInstance() {\n  return new CacheLevel();\n}\n\n/**\n  * Get the configured Cache implementation\n  */\nexport async function getCache() {\n  if (CacheInstance === null) {\n    CacheInstance = await createCacheInstance();\n  }\n\n  return CacheInstance;\n}\n\nexport default {\n  getCache,\n};\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "CacheInstance",
    "memberof": "lib/cache.js",
    "static": true,
    "longname": "lib/cache.js~CacheInstance",
    "access": "public",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/cache.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "createCacheInstance",
    "memberof": "lib/cache.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cache.js~createCacheInstance",
    "access": "public",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/cache.js",
    "importStyle": null,
    "description": "Create a new Cache Instance.<br />This function should only be called once for the lifetime of the module.",
    "lineNumber": 15,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "getCache",
    "memberof": "lib/cache.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "lib/cache.js~getCache",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/cache.js",
    "importStyle": "{getCache}",
    "description": "Get the configured Cache implementation",
    "lineNumber": 22,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "lib/configBase.js",
    "content": "// load any environment variables from .env (if it exists)\nimport DotEnv from 'dotenv';\nDotEnv.config();\n\nimport EventEmitter from 'events';\n\n/**\n * Combine given options with environment variables\n * @param {object} options Incoming options\n * @return {object} Processed configuration options\n */\nexport function parseConfig(options = {}) {\n  const configKeys = Object.keys(options);\n\n  const config = {};\n\n  options.configPrefixes = ['TPAPI'].concat(\n      options.configPrefixes || [],\n  );\n\n  // build this.config object with our settings\n  configKeys.forEach((key) => {\n    // default prefixes are either \"classname_\" or \"TPAPI\"\n    //  classes can add more with configPrefixes\n    options.configPrefixes.forEach((prefix) => {\n      const configEnvName = `${prefix}_${key}`.toUpperCase();\n\n      if (process.env[configEnvName]) {\n        // console.log(`Using env variable ${configEnvName}`);\n        config[key] = process.env[configEnvName];\n        // console.log(` ${key}(env.${configEnvName})=${config[key]}`);\n      }\n    });\n\n    if (config[key] === undefined) {\n      config[key] = options[key];\n    } else {\n      // convert env variable to number if the base default is a number\n      if (typeof config[key] === 'number') {\n        config[key] = Number(config[key]);\n      } else if (typeof config[key] === 'boolean') {\n        // convert any boolean configs too\n        config[key] = (config[key] === 'true');\n      }\n    }\n  });\n\n  return config;\n}\n\n/**\n * Base Config Object\n * Supports classes with a single argument \"options\"\n * These will be sorted into a member called \"this.config\" containing all the same keys\n *\n * Crucially, these can also be overriden through environment variables\n * For example, for a config option \"timeout\" for class Database, this could be overriden through either:\n *   env.TPAPI_TIMEOUT (using a \"global module name\")\n *\n * Classes can also add additional prefixes to the supported environment variables through:\n *   new ClassInstance({configPrefixes: ['myCustomPrefix']});\n * Which would also allow env.MYCUSTOMPREFIX_TIMEOUT to be used\n *\n * Note that a default value must be supplied for the environment variable to be processed\n * If the default value is a number, the environment variable will be cast to a number as well\n * @class\n */\nexport class ConfigBase extends EventEmitter {\n  /**\n   * A base class that can be configured through environment variables\n   * @param {object} options Config for instantiating this object\n   */\n  constructor(options = {}) {\n    super();\n\n    options.configPrefixes = [this.constructor.name].concat(\n        options.configPrefixes || [],\n    );\n\n    this.config = parseConfig(options || {});\n  }\n}\n\nexport default ConfigBase;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/configBase.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "parseConfig",
    "memberof": "lib/configBase.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/configBase.js~parseConfig",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/configBase.js",
    "importStyle": "{parseConfig}",
    "description": "Combine given options with environment variables",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Incoming options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "Processed configuration options"
    }
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "ConfigBase",
    "memberof": "lib/configBase.js",
    "static": true,
    "longname": "lib/configBase.js~ConfigBase",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/configBase.js",
    "importStyle": "{ConfigBase}",
    "description": "Base Config Object<br />Supports classes with a single argument \"options\"<br />These will be sorted into a member called \"this.config\" containing all the same keys<br /><br />Crucially, these can also be overriden through environment variables<br />For example, for a config option \"timeout\" for class Database, this could be overriden through either:<br />  env.TPAPI_TIMEOUT (using a \"global module name\")<br /><br />Classes can also add additional prefixes to the supported environment variables through:<br />  new ClassInstance({configPrefixes: ['myCustomPrefix']});<br />Which would also allow env.MYCUSTOMPREFIX_TIMEOUT to be used<br /><br />Note that a default value must be supplied for the environment variable to be processed<br />If the default value is a number, the environment variable will be cast to a number as well",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "events~EventEmitter"
    ]
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/configBase.js~ConfigBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/configBase.js~ConfigBase#constructor",
    "access": "public",
    "description": "A base class that can be configured through environment variables",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Config for instantiating this object"
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "config",
    "memberof": "lib/configBase.js~ConfigBase",
    "static": false,
    "longname": "lib/configBase.js~ConfigBase#config",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "lib/index.js",
    "content": "/**\n* Import all the parks included in the library\n*/\n// Efteling\nimport Efteling from './parks/efteling/efteling.js';\n// EuropaPark\nimport EuropaPark from './parks/europapark/europapark.js';\n// Compagnie des Alpes\nimport WalibiBelgium from './parks/walibi/walibibelgium.js';\nimport WalibiHolland from './parks/walibi/walibiholland.js';\n\n/**\n* Export all parks as string\n*/\nexport default {\n  parks: {\n    // Efteling\n    Efteling,\n    // EuropaPark\n    EuropaPark,\n    // Compagnie des Alpes\n    WalibiBelgium,\n    WalibiHolland,\n  },\n  allParks: [\n    // Efteling\n    Efteling,\n    // Europa-Park\n    EuropaPark,\n    // Compagnie des Alpes\n    WalibiBelgium,\n    WalibiHolland,\n  ],\n};\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "lib/parks/efteling/efteling.js",
    "content": "import moment from 'moment-timezone';\nimport fetch from 'node-fetch';\nimport {queueType, entityType} from '../types.js';\nimport {Park} from '../park.js';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* Efteling Park Object\n* Make sure all environment variables are set in an .env file which should be in the main location.\n* Not setting these variables will make the module exit early without returning data.\n*\n* This class is here to fetch the POI data and to attach queue times data to it.\n* After the fetches this data is send to the end user and from there he could do whatever he wants to do.\n*\n* Most park specific parameters are set already\n* @class\n*/\nexport class Efteling extends Park {\n  /**\n  * Create a new Efteling Park object\n  * @param {object} options\n  */\n  constructor(options = {}) {\n    options.name = 'Efteling';\n    options.timezone = 'Europe/Amsterdam';\n\n    // Setting the parks entrance as it's default location\n    options.latitude = 51.65098350641645;\n    options.longitude = 5.049916835374731;\n\n    // Options for our park Object\n    options.supportswaittimes = 'true';\n    options.supportsschedule = 'true';\n    options.supportsrideschedules = 'false';\n    options.fastPass = 'true';\n    options.FastPassReturnTimes = 'false';\n\n    // Api options\n    options.apiKey = process.env.EFTELING_API_KEY;\n\n    options.searchURL = process.env.EFTELING_SEARCH_URL;\n    options.waitTimesURL = process.env.EFTELING_WAITTIMES_URL;\n    options.histURL = process.env.EFTELING_HIST_URL;\n\n    // Language options\n    options.languages = process.env.LANGUAGES;\n\n    options.langoptions = `{'en', 'fr', 'de', 'nl'}`;\n\n    super(options);\n\n    // Check for existance\n    if (!this.config.searchURL) throw new Error('Missing Efteling search url!');\n    if (!this.config.apiKey) throw new Error('Missing Efteling apiKey!');\n    if (!this.config.waitTimesURL) throw new Error('Missing Efteling waittimes url!');\n    if (!this.config.histURL) throw new Error('Missing Efteling Operating Hours url!');\n    if (!this.config.languages) {\n      this.config.languages = 'en';\n    };\n  }\n\n  /**\n  * Get Efteling POI data\n  * This data contains general ride names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.getPois().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling POIS without queuetimes\n  */\n  async getPOIS() {\n    return await this.cache.wrap('poidata', async () => {\n      return fetch(this.config.searchURL +\n        `search?q.parser=structured&size=1000&q=(and (phrase field%3Dlanguage '$${this.config.languages}'))`,\n      {\n        method: 'GET',\n        headers: {\n          Authorization: this.config.apiKey,\n        },\n      },\n      )\n          .then((res) => res.json())\n          .then((data) => {\n            if (!data) throw new Error('No PoiData received from Efteling!'); // We didn't get any data\n            const poiData = {};\n\n            data.hits.hit.forEach((hit) => {\n              if (hit.hide_in_app === 'true') return; // We don't want data that isn't displayed anyway\n\n              let singlerider = undefined;\n\n              if (hit.fields.alternateid && hit.fields.alternateid.indexOf('singlerider') === 0) {\n                singlerider = 'true';\n              } else {\n                singlerider = 'false';\n              }\n              // Base rides & pois\n              if (hit.fields) {\n                poiData[hit.fields.id] = {\n                  singlerider: singlerider,\n                  name: hit.fields.name,\n                  id: hit.fields.id,\n                  type: hit.fields.category,\n                  properties: hit.fields.properties,\n                  area: hit.fields.empire,\n                  description: hit.fields.detail_text,\n                  short_description: hit.fields.subtitle,\n                  label: undefined,\n                  category: hit.fields.targetgroups,\n                };\n\n                // Define The six Swans & Single Rider Queues\n                if (hit.fields.alternateid && hit.fields.alternatelabel === 'Boat ride') {\n                  poiData[hit.fields.alternateid] = {\n                    singlerider: 'false',\n                    name: hit.fields.name,\n                    id: hit.fields.alternateid,\n                    type: hit.fields.category,\n                    properties: hit.fields.properties,\n                    area: hit.fields.empire,\n                    description: hit.fields.detail_text,\n                    short_description: hit.fields.subtitle,\n                    label: hit.fields.alternatelabel,\n                    category: hit.fields.targetgroups,\n                  };\n                } else if (hit.fields.alternateid && hit.fields.alternateid.indexOf('singlerider')) {\n                  poiData[hit.fields.id].singleRiderId = hit.fields.alternateid;\n                  poiData[hit.fields.alternateid] = {\n                    singlerider: 'true',\n                    name: hit.fields.name + ' Single Rider',\n                    id: hit.fields.alternateid,\n                    type: hit.fields.category,\n                    properties: hit.fields.properties,\n                    area: hit.fields.empire,\n                    description: hit.fields.detail_text,\n                    short_description: hit.fields.subtitle,\n                    label: hit.fields.alternatelabel,\n                    category: hit.fields.targetgroups,\n                  };\n                }\n\n                // Get the location tags\n                if (hit.fields.latlon) {\n                  const latsplit = /([0-9.]+),([0-9.]+)/.exec(hit.fields.latlon);\n                  if (latsplit) {\n                    poiData[hit.fields.id].location = {\n                      latitude: Number(latsplit[1]),\n                      longitude: Number(latsplit[2]),\n                    };\n                  }\n                  if (latsplit && hit.fields.alternateid) {\n                    poiData[hit.fields.alternateid].location = {\n                      latitude: Number(latsplit[1]),\n                      longitude: Number(latsplit[2]),\n                    };\n                  }\n                }\n              }\n            });\n            return poiData;\n          });\n    }, 1000 * 60 * 60 * 12 /* cache for 12 hours */);\n  }\n\n  /**\n  * Build Efteling ride object\n  * This data contains general ride names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.buildRidePOI().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling ride POIS without queuetimes\n  */\n  async buildRidePOI() {\n    const poiData = await this.getPOIS();\n\n    if (!poiData) throw new Error('No PoiData for Efteling found!');\n    const pois = {};\n    let minHeightCM = undefined;\n    let minHeightComp = undefined;\n    let wet = undefined;\n    let dizzyn = undefined;\n    let preg = undefined;\n    let weelchairtag = undefined;\n    let familypoi = undefined;\n    let thrillpoi = undefined;\n    let youngpoi = undefined;\n    let fastPass = undefined;\n    Object.keys(poiData).forEach((poi) => {\n      if (poiData[poi].id === 'dezeszwanenrondvaart' || poiData[poi].type === 'attraction') { // Yeah, somehow TSS is listed as fairytale.\n        // Ugly Python FP Tweak\n        if (poiData[poi].name === 'Python') {\n          fastPass = 'true';\n        } else {\n          fastPass = 'false';\n        }\n        // Efteling tags\n        if (poiData[poi].category) {\n          const Thrill = poiData[poi].category.find((prop) => prop.indexOf('thrillseekers') === 0);\n          const Young = poiData[poi].category.find((prop) => prop.indexOf('youngest-ones') === 0);\n          const Family = poiData[poi].category.find((prop) => prop.indexOf('whole-family') === 0);\n\n          if (Thrill !== undefined) {\n            thrillpoi = 'Thrillseekers';\n          } else {\n            thrillpoi = undefined;\n          }\n          if (Young !== undefined) {\n            youngpoi = 'Youngest_Ones';\n          } else {\n            youngpoi = undefined;\n          }\n          if (Family !== undefined) {\n            familypoi = 'Family';\n          } else {\n            familypoi = undefined;\n          }\n        }\n\n        if (poiData[poi].properties) {\n          const minHeightProp = poiData[poi].properties.find((prop) => prop.indexOf('minimum') === 0);\n          const minHeightComProp = poiData[poi].properties.find((prop) => prop.endsWith('undersupervision'));\n          const maygetwet = poiData[poi].properties.find((prop) => prop.indexOf('wet') === 0);\n          const weelchair = poiData[poi].properties.find((prop) => prop.indexOf('notaccessiblewheelchairs') === 0);\n          const dizzyness = poiData[poi].properties.find((prop) => prop.indexOf('dizzy') === 0);\n          const pregnant = poiData[poi].properties.find((prop) => prop.indexOf('pregnantwomen') === 0);\n          if (minHeightProp !== undefined) {\n            const minHeightNumber = Number(minHeightProp.slice(7));\n            minHeightCM = minHeightNumber + ' cm';\n          } else {\n            minHeightCM = undefined;\n          }\n\n          if (minHeightComProp !== undefined) {\n            const minHeightCompNumber = minHeightComProp.substring(0, 3);\n            minHeightComp = minHeightCompNumber + ' cm';\n          } else {\n            minHeightComp = undefined;\n          }\n\n          if (maygetwet !== undefined) {\n            wet = 'mayGetWet';\n          } else {\n            wet = undefined;\n          }\n\n          if (weelchair !== undefined) {\n            weelchairtag = 'NotAccessibleWithWeelchair';\n          } else {\n            weelchairtag = undefined;\n          }\n\n          if (dizzyness !== undefined) {\n            dizzyn = 'mayGetDizzy';\n          } else {\n            dizzyn = undefined;\n          }\n\n          if (pregnant !== undefined) {\n            preg = 'UnsuitableForPregnantWomen';\n          } else {\n            preg = undefined;\n          }\n        }\n\n        const restrictions = {\n          minHeight: minHeightCM,\n          minHeightAccompanied: minHeightComp,\n        };\n\n        pois[poiData[poi].id] = {\n          name: poiData[poi].name,\n          id: poiData[poi].id,\n          waitTime: null,\n          state: null,\n          active: null,\n          location: {\n            area: poiData[poi].area,\n            latitude: poiData[poi].location.latitude,\n            longitude: poiData[poi].location.longitude,\n          },\n          meta: {\n            category: [\n              thrillpoi,\n              youngpoi,\n              familypoi,\n            ],\n            description: poiData[poi].description,\n            label: poiData[poi].label,\n            short_description: poiData[poi].short_description,\n            single_rider: poiData[poi].singlerider,\n            fastPass: fastPass,\n            type: entityType.ride,\n            tags: [\n              wet,\n              weelchairtag,\n              dizzyn,\n              preg,\n            ],\n            restrictions: restrictions,\n          },\n        };\n      }\n    });\n    return Promise.resolve(pois);\n  }\n\n  /**\n  * Build Efteling fairytale object\n  * This data contains general fairytale names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.buildFairyTalePOI().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling fairytale POIS\n  */\n  async buildFairytalePOI() {\n    const poiData = await this.getPOIS();\n\n    if (!poiData) throw new Error('No PoiData for Efteling found!');\n    const pois = {};\n    Object.keys(poiData).forEach((poi) => {\n      if (poiData[poi].id === 'dezeszwanenrondvaart' || poiData[poi].type === 'fairytale') {\n        pois[poiData[poi].id] = {\n          name: poiData[poi].name,\n          id: poiData[poi].id,\n          location: {\n            area: poiData[poi].area,\n            latitude: poiData[poi].location.latitude,\n            longitude: poiData[poi].location.longitude,\n          },\n          meta: {\n            description: poiData[poi].description,\n            short_description: poiData[poi].short_description,\n            type: entityType.fairytale,\n          },\n        };\n      }\n    });\n    return Promise.resolve(pois);\n  }\n\n  /**\n  * Build Efteling restaurant object\n  * This data contains general restaurant names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.buildRestaurantPOI().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling restaurant POIS\n  */\n  async buildRestaurantPOI() {\n    const poiData = await this.getPOIS();\n\n    if (!poiData) throw new Error('No PoiData for Efteling found!');\n    const pois = {};\n    Object.keys(poiData).forEach((poi) => {\n      if (poiData[poi].type === 'restaurant') {\n        pois[poiData[poi].id] = {\n          name: poiData[poi].name,\n          id: poiData[poi].id,\n          location: {\n            area: poiData[poi].area,\n            latitude: poiData[poi].location.latitude,\n            longitude: poiData[poi].location.longitude,\n          },\n          meta: {\n            description: poiData[poi].description,\n            short_description: poiData[poi].short_description,\n            type: entityType.restaurant,\n          },\n        };\n      }\n    });\n    return Promise.resolve(pois);\n  }\n\n  /**\n  * Build Efteling show object\n  * This data contains general show names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.buildShowPOI().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling show POIS\n  */\n  async buildShowPOI() {\n    const poiData = await this.getPOIS();\n\n    if (!poiData) throw new Error('No PoiData for Efteling found!');\n    const pois = {};\n    let wet = undefined;\n    let dizzyn = undefined;\n    let anxious = undefined;\n    let weelchairtag = undefined;\n    Object.keys(poiData).forEach((poi) => {\n      if (poiData[poi].type === 'show') {\n        if (poiData[poi].properties) {\n          const maygetwet = poiData[poi].properties.find((prop) => prop.indexOf('wet') === 0);\n          const weelchair = poiData[poi].properties.find((prop) => prop.indexOf('notaccessiblewheelchairs') === 0);\n          const dizzyness = poiData[poi].properties.find((prop) => prop.indexOf('dizzy') === 0);\n          const anxious1 = poiData[poi].properties.find((prop) => prop.indexOf('anxiouseffects') === 0);\n\n          if (maygetwet !== undefined) {\n            wet = 'mayGetWet';\n          } else {\n            wet = undefined;\n          }\n\n          if (weelchair !== undefined) {\n            weelchairtag = 'NotAccessibleWithWeelchair';\n          } else {\n            weelchairtag = undefined;\n          }\n\n          if (dizzyness !== undefined) {\n            dizzyn = 'mayGetDizzy';\n          } else {\n            dizzyn = undefined;\n          }\n\n          if (anxious1 !== undefined) {\n            anxious = 'AnxiousEffects';\n          } else {\n            anxious = undefined;\n          }\n        }\n\n        pois[poiData[poi].id] = {\n          name: poiData[poi].name,\n          id: poiData[poi].id,\n          location: {\n            area: poiData[poi].area,\n            latitude: poiData[poi].location.latitude,\n            longitude: poiData[poi].location.longitude,\n          },\n          meta: {\n            description: poiData[poi].description,\n            short_description: poiData[poi].short_description,\n            type: entityType.show,\n            tags: [\n              wet,\n              weelchairtag,\n              dizzyn,\n              anxious,\n            ],\n          },\n        };\n      }\n    });\n    return Promise.resolve(pois);\n  }\n\n  /**\n  * Build Efteling merchandise object\n  * This data contains general merchandise names, descriptions etc.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.buildMercnahdisePOI().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Efteling merchandise POIS\n  */\n  async buildMerchandisePOI() {\n    const poiData = await this.getPOIS();\n\n    if (!poiData) throw new Error('No PoiData for Efteling found!');\n    const pois = {};\n    Object.keys(poiData).forEach((poi) => {\n      if (poiData[poi].type === 'merchandise') {\n        pois[poiData[poi].id] = {\n          name: poiData[poi].name,\n          id: poiData[poi].id,\n          location: {\n            area: poiData[poi].area,\n            latitude: poiData[poi].location.latitude,\n            longitude: poiData[poi].location.longitude,\n          },\n          meta: {\n            description: poiData[poi].description,\n            short_description: poiData[poi].short_description,\n            type: entityType.merchandise,\n          },\n        };\n      }\n    });\n    return Promise.resolve(pois);\n  }\n\n  /**\n  * Get Efteling QueueTimes data\n  * This data contains the queue data, we'll assign them to the earlier fetched pois\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.getQueue().then((queue) => {\n  * console.log(queue)\n  * });\n  * @return {string} All Efteling POIS with queuetimes\n  */\n  async getQueue() {\n    return await this.buildRidePOI().then((rideData) => fetch(this.config.waitTimesURL,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const rides = [];\n          // Park is closed, and nothing is returned, attach that here.\n          if (!json.AttractionInfo.length) {\n            Object.keys(rideData).forEach((ride) => {\n            // Update the variables to the closed rides\n              rideData[ride].waitTime = '0';\n              rideData[ride].state = queueType.closed;\n              rideData[ride].active = 'false';\n\n              // Create the ride Object\n              const rideobj = {\n                name: rideData[ride].name,\n                id: 'Efteling_' + rideData[ride].id,\n                waitTime: rideData[ride].waitTime,\n                state: rideData[ride].state,\n                active: rideData[ride].active,\n                location: {\n                  area: rideData[ride].location.area,\n                  latitude: rideData[ride].location.latitude,\n                  longitude: rideData[ride].location.longitude,\n                },\n                meta: {\n                  category: rideData[ride].meta.category,\n                  label: rideData[ride].meta.label,\n                  description: rideData[ride].meta.description,\n                  short_description: rideData[ride].meta.short_description,\n                  type: rideData[ride].meta.type,\n                  single_rider: rideData[ride].meta.single_rider,\n                  fastPass: rideData[ride].meta.fastPass,\n                  tags: rideData[ride].meta.tags,\n                  restrictions: rideData[ride].meta.restrictions,\n                },\n              };\n              rides.push(rideobj);\n            });\n\n            return Promise.resolve(rides);\n          }\n\n          // If there are rides listed, fetch them here.\n          json.AttractionInfo.forEach((ridetime) => {\n            let state = null;\n            let active = null;\n            let waitTime = null;\n\n            if (ridetime.State === 'gesloten') { // Ride closed\n              state = queueType.closed;\n              active = 'false';\n              waitTime = '0';\n            } else if (ridetime.State === 'tijdelijkbuitenbedrijf') { // Ride went down for some reason\n              state = queueType.down;\n              active = 'false';\n              waitTime = '0';\n            } else if (ridetime.State === 'inonderhoud') { // Ride in maintenance\n              state = queueType.refurbishment;\n              active = 'false';\n              waitTime = '0';\n            } else if (ridetime.WaitingTime === undefined && ridetime.State === 'open') { // Ride is open, no queuetime reported\n              state = queueType.operating;\n              active = 'false';\n              waitTime = '0';\n            } else if (ridetime.WaitingTime === undefined && ridetime.State !== 'open') { // Ride is closed\n              state = queueType.closed;\n              active = 'false';\n              waitTime = '0';\n            } else { // Probably open, or some strange newly created frankensteined queue type\n              state = queueType.operating;\n              active = 'true';\n              waitTime = ride.WaitingTime;\n            }\n\n            if (rideData[ridetime.Id]) {\n              // Update the variables to the rides\n              rideData[ridetime.Id].waitTime = waitTime;\n              rideData[ridetime.Id].state = state;\n              rideData[ridetime.Id].active = active;\n\n              // Create the ride Object\n              const rideobj = {\n                name: rideData[ridetime.Id].name,\n                id: 'Efteling_' + rideData[ridetime.Id].id,\n                waitTime: rideData[ridetime.Id].waitTime,\n                state: rideData[ridetime.Id].state,\n                active: rideData[ridetime.Id].active,\n                location: {\n                  area: rideData[ridetime.Id].location.area,\n                  latitude: rideData[ridetime.Id].location.latitude,\n                  longitude: rideData[ridetime.Id].location.longitude,\n                },\n                meta: {\n                  category: rideData[ridetime.Id].meta.category,\n                  label: rideData[ridetime.Id].meta.label,\n                  description: rideData[ridetime.Id].meta.description,\n                  short_description: rideData[ridetime.Id].meta.short_description,\n                  type: rideData[ridetime.Id].meta.type,\n                  single_rider: rideData[ridetime.Id].meta.single_rider,\n                  singleRider: rideData[ridetime.Id].meta.singleRider,\n                  fastPass: rideData[ridetime.Id].meta.fastPass,\n                  tags: rideData[ridetime.Id].meta.tags,\n                  restrictions: rideData[ridetime.Id].meta.restrictions,\n                },\n              };\n              rides.push(rideobj);\n              return Promise.resolve(rides);\n            }\n          });\n        }),\n    );\n  };\n\n  /**\n  * Get Efteling Park Hours data\n  * This data contains the hours data, used to display the operating hours of Efteling\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.Efteling();\n  *\n  * park.getOpHours().then((hours) => {\n  * console.log(hours)\n  * });\n  * @return {string} All Efteling Operating Hours for 1mo\n  */\n  async getOpHours() {\n    const currentYear = moment().format('YYYY');\n    const currentMonth = moment().format('MM');\n\n    return fetch(\n        this.config.histURL +\n        `${currentYear}/${currentMonth}`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          if (!json.OpeningHours.length) {\n          // Park is closed, do nothing but returning today as empty string\n            const hours = {\n              date: moment().format('YYYY-MM-DD'),\n              type: 'Closed',\n              openingTime: moment('23:59', 'HH:mm a').format(),\n              closingTime: moment('23:59', 'HH:mm a').format(),\n              special: [],\n            };\n            Calendar.push(hours);\n          } else {\n          // Return the actual opening hours\n            json.OpeningHours.forEach((cal) => {\n              let date = moment.tz(`${cal.Date}`, 'YYYY-MM-DD', 'Europe/Amsterdam');\n              date = moment(date).format('YYYY-MM-DD');\n              cal.OpeningHours.forEach((cal1) => {\n                let open = moment.tz(`${date}${cal1.Open}`, 'YYYY-MM-DDHH:mm', 'Europe/Amsterdam');\n                open = moment(open).format();\n                let close = moment.tz(`${date}${cal1.Close}`, 'YYYY-MM-DDHH:mm', 'Europe/Amsterdam');\n                close = moment(close).format();\n                const type = 'Operating';\n\n                const hours = {\n                  closingTime: close,\n                  openingTime: open,\n                  type: type,\n                  special: [],\n                  date: date,\n                };\n                Calendar.push(hours);\n              });\n            });\n          };\n          return Promise.resolve(Calendar);\n        });\n  }\n};\n\nexport default Efteling;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/efteling/efteling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "Efteling",
    "memberof": "lib/parks/efteling/efteling.js",
    "static": true,
    "longname": "lib/parks/efteling/efteling.js~Efteling",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/efteling/efteling.js",
    "importStyle": "{Efteling}",
    "description": "Efteling Park Object<br />Make sure all environment variables are set in an .env file which should be in the main location.<br />Not setting these variables will make the module exit early without returning data.<br /><br />This class is here to fetch the POI data and to attach queue times data to it.<br />After the fetches this data is send to the end user and from there he could do whatever he wants to do.<br /><br />Most park specific parameters are set already",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/parks/park.js~Park"
    ]
  },
  {
    "__docId__": 108,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#constructor",
    "access": "public",
    "description": "Create a new Efteling Park object",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "getPOIS",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getPOIS",
    "access": "public",
    "description": "Get Efteling POI data<br />This data contains general ride names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.getPois().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS without queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "buildRidePOI",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#buildRidePOI",
    "access": "public",
    "description": "Build Efteling ride object<br />This data contains general ride names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.buildRidePOI().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 184,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling ride POIS without queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "buildFairytalePOI",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#buildFairytalePOI",
    "access": "public",
    "description": "Build Efteling fairytale object<br />This data contains general fairytale names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.buildFairyTalePOI().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 331,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling fairytale POIS"
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "buildRestaurantPOI",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#buildRestaurantPOI",
    "access": "public",
    "description": "Build Efteling restaurant object<br />This data contains general restaurant names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.buildRestaurantPOI().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 370,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling restaurant POIS"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "buildShowPOI",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#buildShowPOI",
    "access": "public",
    "description": "Build Efteling show object<br />This data contains general show names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.buildShowPOI().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 409,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling show POIS"
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "buildMerchandisePOI",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#buildMerchandisePOI",
    "access": "public",
    "description": "Build Efteling merchandise object<br />This data contains general merchandise names, descriptions etc.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.buildMercnahdisePOI().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 489,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling merchandise POIS"
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getQueue",
    "access": "public",
    "description": "Get Efteling QueueTimes data<br />This data contains the queue data, we'll assign them to the earlier fetched pois",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.getQueue().then((queue) => {\nconsole.log(queue)\n});"
    ],
    "lineNumber": 528,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling POIS with queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/efteling/efteling.js~Efteling",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/efteling/efteling.js~Efteling#getOpHours",
    "access": "public",
    "description": "Get Efteling Park Hours data<br />This data contains the hours data, used to display the operating hours of Efteling",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.Efteling();\n\npark.getOpHours().then((hours) => {\nconsole.log(hours)\n});"
    ],
    "lineNumber": 659,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Efteling Operating Hours for 1mo"
    },
    "params": []
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "lib/parks/entity.js",
    "content": "import ConfigBase from '../configBase.js';\nimport moment from 'moment-timezone';\n\n/**\n * A super-class that Parks/Resorts/etc. inherit from.\n * Handles general logic for objects that are a place/entity.\n */\nexport class Entity extends ConfigBase {\n  /**\n   * Construct a new Entity\n   * @param {object} options\n   */\n  constructor(options = {}) {\n    // offline mode, never request any data, rely on manually serialised data to run\n    options.offline = options.offline || false;\n\n    // generate a random Android user-agent if we aren't supplied one\n    options.useragent = options.useragent || null;\n\n    super(options);\n\n    if (!this.config.name) {\n      throw new Error(`Missing name for constructed Entity object ${this.constructor.name}`);\n    }\n\n    if (!this.config.timezone) {\n      throw new Error(`Missing timezone for constructed Entity object ${this.constructor.name}`);\n    }\n    if (moment.tz.names().indexOf(this.config.timezone) < 0) {\n      throw new Error(`Entity object ${this.constructor.name} gives an invalid timezone: ${this.config.timezone}`);\n    }\n  }\n\n  /**\n   * Debug log\n   * @param  {...any} args Message to debug log\n   */\n  log(...args) {\n    console.log(`[\\x1b[32m${this.getUniqueID()}\\x1b[0m]`, ...args);\n  }\n\n  /**\n   * Get a globally unique ID for this entity\n   * @return {string}\n   */\n  getUniqueID() {\n    // by default, return the class name\n    return this.constructor.name;\n  }\n\n  /**\n   * Return the current time for this entity in its local timezone\n   * @return {moment}\n   */\n  getTimeNowMoment() {\n    return moment().tz(this.config.timezone);\n  }\n\n  /**\n   * Return the current time for this entity in its local timezone\n   * @return {string}\n   */\n  getTimeNow() {\n    return this.getTimeNowMoment().format();\n  }\n\n  /**\n   * Get entity's human-friendly name string\n   * @return {string}\n   */\n  get Name() {\n    return this.config.name;\n  }\n\n  /**\n   * Get entity's human-friendly language string\n   * @return {string}\n   */\n  get LangOptions() {\n    return this.config.langoptions;\n  }\n\n  /**\n   * Get entity's human-friendly location string\n   * @return {string}\n   */\n  get LocationString() {\n    return `${this.config.latitude}, ${this.config.longitude}`;\n  }\n\n  /**\n   * Get entity's human-friendly timezone string\n   * @return {string}\n   */\n  get Timezone() {\n    return this.config.timezone;\n  }\n\n  /**\n   * Get entity's human-friendly waittimes support string\n   * @return {string}\n   */\n  get SupportsWaitTimes() {\n    return this.config.supportswaittimes;\n  }\n\n  /**\n   * Get entity's human-friendly openingtimes support string\n   * @return {string}\n   */\n  get SupportsOpeningTimes() {\n    return this.config.supportsschedule;\n  }\n\n  /**\n   * Get entity's human-friendly ride openingtimes support string\n   * @return {string}\n   */\n  get SupportsRideSchedules() {\n    return this.config.supportsrideschedules;\n  }\n\n  /**\n   * Get entity's human-friendly fastpass support string\n   * @return {string}\n   */\n  get FastPass() {\n    return this.config.fastPass;\n  }\n\n  /**\n   * Get entity's human-friendly FastPassReturnTimes support string\n   * @return {string}\n   */\n  get FastPassReturnTimes() {\n    return this.config.FastPassReturnTimes;\n  }\n\n  /**\n   * Get entity's human-friendly moment now string\n   * @return {string}\n   */\n  get Now() {\n    return this.getTimeNow();\n  }\n}\n\nexport default Entity;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "Entity",
    "memberof": "lib/parks/entity.js",
    "static": true,
    "longname": "lib/parks/entity.js~Entity",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/entity.js",
    "importStyle": "{Entity}",
    "description": "A super-class that Parks/Resorts/etc. inherit from.<br />Handles general logic for objects that are a place/entity.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "lib/configBase.js~ConfigBase"
    ]
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#constructor",
    "access": "public",
    "description": "Construct a new Entity",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "log",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#log",
    "access": "public",
    "description": "Debug log",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Message to debug log"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "getUniqueID",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#getUniqueID",
    "access": "public",
    "description": "Get a globally unique ID for this entity",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getTimeNowMoment",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#getTimeNowMoment",
    "access": "public",
    "description": "Return the current time for this entity in its local timezone",
    "lineNumber": 55,
    "return": {
      "nullable": null,
      "types": [
        "moment"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getTimeNow",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#getTimeNow",
    "access": "public",
    "description": "Return the current time for this entity in its local timezone",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 124,
    "kind": "get",
    "name": "Name",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#Name",
    "access": "public",
    "description": "Get entity's human-friendly name string",
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "get",
    "name": "LangOptions",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#LangOptions",
    "access": "public",
    "description": "Get entity's human-friendly language string",
    "lineNumber": 79,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "LocationString",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#LocationString",
    "access": "public",
    "description": "Get entity's human-friendly location string",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "Timezone",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#Timezone",
    "access": "public",
    "description": "Get entity's human-friendly timezone string",
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "SupportsWaitTimes",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#SupportsWaitTimes",
    "access": "public",
    "description": "Get entity's human-friendly waittimes support string",
    "lineNumber": 103,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "SupportsOpeningTimes",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#SupportsOpeningTimes",
    "access": "public",
    "description": "Get entity's human-friendly openingtimes support string",
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "SupportsRideSchedules",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#SupportsRideSchedules",
    "access": "public",
    "description": "Get entity's human-friendly ride openingtimes support string",
    "lineNumber": 119,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "FastPass",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#FastPass",
    "access": "public",
    "description": "Get entity's human-friendly fastpass support string",
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "FastPassReturnTimes",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#FastPassReturnTimes",
    "access": "public",
    "description": "Get entity's human-friendly FastPassReturnTimes support string",
    "lineNumber": 135,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "Now",
    "memberof": "lib/parks/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/entity.js~Entity#Now",
    "access": "public",
    "description": "Get entity's human-friendly moment now string",
    "lineNumber": 143,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "lib/parks/europapark/europapark.js",
    "content": "import fetch from 'node-fetch';\nimport {queueType} from '../types.js';\nimport {Park} from '../park.js';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* EuropaPark Park Object\n* Make sure all environment variables are set in an .env file which should be in the main location.\n* Not setting these variables will make the module exit early without returning data.\n*\n* This class is here to fetch the POI data and to attach queue times data to it.\n* After the fetches this data is send to the end user and from there he could do whatever he wants to do.\n*\n* This class contains some login and refresh functions, but NEVER call them if you don't need them.\n* Most park specific parameters are set already\n* @class\n*/\nexport class EuropaPark extends Park {\n  /**\n  * Create a new EuropaPark Park object\n  * @param {object} options\n  */\n  constructor(options = {}) {\n    options.name = options.name || 'Europa-Park';\n    options.timezone = options.timezone || 'Europe/Berlin';\n\n    // Setting the parks entrance as latlon\n    options.latitude = 48.266140769976715;\n    options.longitude = 7.722050520358709;\n\n    // Options for our park Object\n    options.supportswaittimes = 'true';\n    options.supportsschedule = 'false';\n    options.supportsrideschedules = 'false';\n    options.fastPass = 'true';\n    options.FastPassReturnTimes = 'false';\n\n    // API options\n    options.apiBase = options.apiBase || process.env.EUROPAPARK_APIBASE;\n    options.credentials = options.credentials || process.env.EUROPAPARK_LOGINSTRING;\n    options.loginurl = options.loginurl || process.env.EUROPAPARK_LOGIN;\n    options.refresh = options.refresh || process.env.EUROPAPARK_REFRESH;\n\n    // Languages\n    options.languages = options.languages || process.env.LANGUAGES;\n\n    options.langoptions = options.langoptions || `{'en', 'de', 'fr'}`;\n\n    super(options);\n\n    // Check for existance\n    if (!this.config.apiBase) throw new Error('Missing Europa-Park apiBase!');\n    if (!this.config.credentials) throw new Error('Missing Europa-Park credentials!');\n    if (!this.config.loginurl) throw new Error('Missing Europa-Park Login URL!');\n    if (!this.config.refresh) throw new Error('Missing Europa-Park Refresh URL!');\n    if (!this.config.languages) {\n      this.config.languages = 'en';\n    };\n  }\n\n  // Load the Europapark poidata\n  // const poidata = ('./data/parks/europapark/europapark_pois.json')\n  // const poimock = ('./data/parks/europapark/europapark_poi_mock.json')\n\n  /**\n  * Login to EuropaPark API\n  * NEVER call this method without calling refresh() or getPOIS()!\n  * Calling this method too fast can cause a perm block from the Macks\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.EuropaPark();\n  *\n  * park.loginEP().then((token) => {\n  * console.log(token)\n  * });\n  * @return {string} EuropaPark refresh token\n  */\n  async loginEP() {\n    return fetch(this.config.apiBase +\n      this.config.loginurl,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: this.config.credentials,\n    },\n    )\n        .then((res) => res.json())\n        .then((login) => {\n          const refreshtoken = {'refresh_token': login.refresh_token};\n          return Promise.resolve(refreshtoken);\n        });\n  }\n\n  /**\n  * Refresh your just obtained ep token\n  * Tokens are 6 hrs valid, however there's no point in just calling this function without queues or sth else\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.EuropaPark();\n  *\n  * park.refreshEP().then((token) => {\n  * console.log(token)\n  * });\n  * @return {string} EuropaPark JWT Token\n  */\n  async refreshEP() {\n    return await this.cache.wrap('jwttoken', async () => {\n      return await this.loginEP().then((refreshtoken) => fetch(this.config.apiBase +\n        this.config.refresh,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(refreshtoken),\n      },\n      )\n          .then((res) => res.json())\n          .then((jwt) => {\n            const jwttoken = 'Bearer ' + jwt.token;\n            return Promise.resolve(jwttoken);\n          }),\n      );\n    }, 1000 * 60 * 60 * 6); // 6 hours\n  };\n\n  /**\n  * Get All POIS of EuropaPark\n  * This data contains all the POIS in EuropaPark\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.EuropaPark();\n  *\n  * park.getPois().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} EP POIS without queues\n  */\n  async getPOIS() {\n    return await this.cache.wrap('poidata', async () => {\n      const jwttoken = await this.refreshEP();\n\n      return fetch(this.config.apiBase +\n        `pois/${this.config.languages}`,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'JWTAuthorization': jwttoken,\n        },\n      },\n      )\n          .then((res) => res.json())\n          .then((rideData) => {\n            const poi = {};\n            const singleRider = 'false'; // EP doesn't send these values\n            let fastPass = 'false'; // Set fastpass to false as default\n            let isVirtQueue = 'false'; // Default poi isn't a virtqueue\n            rideData.pois.forEach((ride) => { // Data includes Rulantica, however, they're listed as slides, so not defining anything special here.\n              if (ride.type === 'attraction' && ride.code !== null) { // Return rides and pois which haven't null\n                if (ride.name.indexOf('Queue - ') === 0) return; // Ignore the Queue Pointers\n                if (ride.name.indexOf('VirtualLine: ') === 0) { // So EP reports virtlane as seperate map pointer, they send it as a stand-alone POI, assign the VirtQueue tag here.\n                  fastPass = 'true';\n                  isVirtQueue = 'true';\n                } else { // Yay, it's not a Virtline entry!\n                  fastPass = 'false';\n                  isVirtQueue = 'false';\n                }\n                let area = 'Germany'; // Really, this is the strangest empire thing ever\n                if (ride.areaId == 10) {\n                  area = 'Adventureland';\n                } else if (ride.areaId == 11) {\n                  area = 'Kingdom of the Minimoys';\n                } else if (ride.areaId == 12) {\n                  area = 'Germany';\n                } else if (ride.areaId == 13) {\n                  area = 'England';\n                } else if (ride.areaId == 14) {\n                  area = 'France';\n                } else if (ride.areaId == 15) {\n                  area = 'Greece';\n                } else if (ride.areaId == 17) {\n                  area = 'Netherlands';\n                } else if (ride.areaId == 19) {\n                  area = 'Ireland';\n                } else if (ride.areaId == 20) {\n                  area = 'Iceland';\n                } else if (ride.areaId == 21) {\n                  area = 'Italy';\n                } else if (ride.areaId == 22) {\n                  area = 'Luxembourg';\n                } else if (ride.areaId == 23) {\n                  area = 'Austria';\n                } else if (ride.areaId == 24) {\n                  area = 'Portugal';\n                } else if (ride.areaId == 25) {\n                  area = 'Russia';\n                } else if (ride.areaId == 26) {\n                  area = 'Switzerland';\n                } else if (ride.areaId == 27) {\n                  area = 'Scandinavia';\n                } else if (ride.areaId == 28) {\n                  area = 'Spain';\n                }\n\n                // EuropaPark actually provides some cool tags which I'll attach here.\n                let producer = null;\n                let opening = null;\n                let capacity = null;\n                let ridetime = null;\n                let thcapacity = null;\n                let gforce = null;\n                let maxspeed = null;\n                let height = null;\n\n                if (ride.attributes) {\n                  Object.keys(ride.attributes).forEach((poiat) => {\n                    if (ride.attributes[poiat].key === 'Producer') {\n                      producer = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Opening') {\n                      opening = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Capacity') {\n                      capacity = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Driving Time') {\n                      ridetime = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Theoretical Capacity') {\n                      thcapacity = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Max Acceleration') {\n                      gforce = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Max Speed') {\n                      maxspeed = ride.attributes[poiat].value;\n                    } else if (ride.attributes[poiat].key === 'Height') {\n                      height = ride.attributes[poiat].value;\n                    }\n                  });\n                }\n\n                // And some restrictions.\n                let minHeight = null;\n                let minHeightAdult = null;\n                let minAge = null;\n                let minAgeAdult = null;\n                let maxHeight = null;\n                if (ride.minHeight) {\n                  minHeight = ride.minHeight;\n                };\n                if (ride.minHeightAdult) {\n                  minHeightAdult = ride.minHeightAdult;\n                };\n                if (ride.minAge) {\n                  minAge = ride.minAge;\n                };\n                if (ride.minAgeAdult) {\n                  minAgeAdult = ride.minAgeAdult;\n                };\n                if (ride.maxHeight) {\n                  maxHeight = ride.maxHeight;\n                }\n\n                // Build the ride object\n                poi[ride.code] = {\n                  name: ride.name,\n                  id: 'EuropaPark_' + ride.code,\n                  waitTime: null,\n                  state: null,\n                  active: null,\n                  location: {\n                    area: area,\n                    latitude: ride.latitude,\n                    longitude: ride.longitude,\n                  },\n                  meta: {\n                    single_rider: singleRider,\n                    fastPass: fastPass,\n                    type: ride.type,\n                    single_rider: 'false',\n                    isVirtQueue: isVirtQueue,\n                    tags: {\n                      Producer: producer,\n                      Capacity: capacity,\n                      Opened: opening,\n                      Duration: ridetime,\n                      Theoretical_Capacity: thcapacity,\n                      Max_GForce: gforce,\n                      Max_Speed: maxspeed,\n                      Height: height,\n                    },\n                    restrictions: {\n                      minHeight: minHeight,\n                      minHeightAccompanied: minHeightAdult,\n                      maxHeight: maxHeight,\n                      minAge: minAge,\n                      minAgeAccompanied: minAgeAdult,\n                    },\n                  },\n                };\n              };\n            });\n            return Promise.resolve(poi);\n          });\n    }, 1000 * 60 * 60 * 12 /* cache for 12 hours */);\n  };\n\n  /**\n  * Get All Queues of EuropaPark\n  * This data contains all the Queues in EuropaPark, attached with pois above.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.EuropaPark();\n  *\n  * park.getQueue().then((queue) => {\n  * console.log(queue)\n  * });\n  * @return {string} EP POIS with queues\n  */\n  async getQueue() {\n    const token = await this.refreshEP();\n    const rideData = await this.getPOIS();\n\n    return fetch(this.config.apiBase +\n      `waitingtimes`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'JWTAuthorization': token,\n      },\n    },\n    )\n        .then((res) => res.json())\n        .then((poiData) => {\n          const rides = [];\n          poiData.waitingtimes.forEach((ridetime) => {\n          // Declare default for rides that doesn't fetch right now\n            let waitTime = null;\n            let state = null;\n            let active = null; // Accepting null as value, since some rides never will join the queue api because they simply never have a queue\n            // However, setting '0' & state will set the ride all day closed, which isn't true obviously\n\n            // TO DO If ride isn't present in this api it just regrets it and returns nothing, however we at least want some tags.\n            if (ridetime.time > 0 && ridetime.time < 91) {\n              waitTime = ridetime.time;\n              state = queueType.operating;\n              active = 'true';\n            } else if (ridetime.time === 91) {\n              waitTime = 91;\n              state = queueType.operating;\n              active = 'true';\n            } else if (ridetime.time === 333 || ridetime.time === 666 || ridetime.time === 777) {\n              waitTime = 0;\n              state = queueType.closed;\n              active = 'false';\n            } else if (ridetime.status === 444 || ridetime.time === 555 || ridetime.time === 999) {\n              waitTime = 0;\n              state = queueType.down;\n              active = 'false';\n            } else if (ridetime.time === 222) {\n              waitTime = 0;\n              state = queueType.refurbishment;\n              active = 'false';\n            }\n\n            if (rideData[ridetime.code]) { // Skip null variables\n              rideData[ridetime.code].waitTime = waitTime;\n              rideData[ridetime.code].state = state;\n              rideData[ridetime.code].active = active;\n\n              const rideobj = {\n                name: rideData[ridetime.code].name,\n                id: rideData[ridetime.code].id,\n                waitTime: rideData[ridetime.code].waitTime,\n                state: rideData[ridetime.code].state,\n                active: rideData[ridetime.code].active,\n                location: {\n                  area: rideData[ridetime.code].location.area,\n                  latitude: rideData[ridetime.code].location.latitude,\n                  longitude: rideData[ridetime.code].location.longitude,\n                },\n                meta: {\n                  type: rideData[ridetime.code].meta.type,\n                  isVirtQueue: rideData[ridetime.code].meta.isVirtQueue,\n                  fastPass: rideData[ridetime.code].meta.fastPass,\n                  single_rider: rideData[ridetime.code].meta.single_rider,\n                  tags: rideData[ridetime.code].meta.tags,\n                  restrictions: rideData[ridetime.code].meta.restrictions,\n                },\n              };\n              rides.push(rideobj);\n            }\n          });\n          return Promise.resolve(rides);\n        });\n  };\n\n  /**\n  * Get All Operating Hours of EuropaPark\n  * This data contains all the Operating Hours in EuropaPark, fetched with currentyear.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.EuropaPark();\n  *\n  * park.getOpHours().then((hours) => {\n  * console.log(hours)\n  * });\n  * @return {string} EP park hours\n  */\n  async getOpHours() {\n    const token = await this.refreshEP();\n\n    return fetch(\n        this.config.apiBase +\n          `europapark/opentime/`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'JWTAuthorization': token,\n          },\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          // Execute Calendar stuff here\n          return Promise.resolve(Calendar);\n        });\n  }\n}\n\nexport default EuropaPark;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/europapark/europapark.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "EuropaPark",
    "memberof": "lib/parks/europapark/europapark.js",
    "static": true,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/europapark/europapark.js",
    "importStyle": "{EuropaPark}",
    "description": "EuropaPark Park Object<br />Make sure all environment variables are set in an .env file which should be in the main location.<br />Not setting these variables will make the module exit early without returning data.<br /><br />This class is here to fetch the POI data and to attach queue times data to it.<br />After the fetches this data is send to the end user and from there he could do whatever he wants to do.<br /><br />This class contains some login and refresh functions, but NEVER call them if you don't need them.<br />Most park specific parameters are set already",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/parks/park.js~Park"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#constructor",
    "access": "public",
    "description": "Create a new EuropaPark Park object",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "loginEP",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#loginEP",
    "access": "public",
    "description": "Login to EuropaPark API<br />NEVER call this method without calling refresh() or getPOIS()!<br />Calling this method too fast can cause a perm block from the Macks",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.EuropaPark();\n\npark.loginEP().then((token) => {\nconsole.log(token)\n});"
    ],
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EuropaPark refresh token"
    },
    "params": []
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "refreshEP",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#refreshEP",
    "access": "public",
    "description": "Refresh your just obtained ep token<br />Tokens are 6 hrs valid, however there's no point in just calling this function without queues or sth else",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.EuropaPark();\n\npark.refreshEP().then((token) => {\nconsole.log(token)\n});"
    ],
    "lineNumber": 112,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EuropaPark JWT Token"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getPOIS",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getPOIS",
    "access": "public",
    "description": "Get All POIS of EuropaPark<br />This data contains all the POIS in EuropaPark",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.EuropaPark();\n\npark.getPois().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 146,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EP POIS without queues"
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getQueue",
    "access": "public",
    "description": "Get All Queues of EuropaPark<br />This data contains all the Queues in EuropaPark, attached with pois above.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.EuropaPark();\n\npark.getQueue().then((queue) => {\nconsole.log(queue)\n});"
    ],
    "lineNumber": 323,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EP POIS with queues"
    },
    "params": []
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/europapark/europapark.js~EuropaPark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/europapark/europapark.js~EuropaPark#getOpHours",
    "access": "public",
    "description": "Get All Operating Hours of EuropaPark<br />This data contains all the Operating Hours in EuropaPark, fetched with currentyear.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.EuropaPark();\n\npark.getOpHours().then((hours) => {\nconsole.log(hours)\n});"
    ],
    "lineNumber": 415,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "EP park hours"
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "lib/parks/park.js",
    "content": "import Entity from './entity.js';\nimport Cache from '../cache/scopedCache.js';\n\n/**\n * Base Park Object\n * @class\n */\nexport class Park extends Entity {\n  /**\n   * Create a new Park object\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // create a new cache object for this park\n    this.cache = new Cache(this.constructor.name, this.config.cacheVersion || 0);\n\n    if (this.constructor === Park) {\n      throw new TypeError('Cannot create Park object directly, only park implementations of Park');\n    }\n  }\n\n  /**\n  * Get All Queues of a park\n  * This data contains all the Queues in park\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.PARKNAME();\n  *\n  * park.getWaitTime().then((ridetimes) => {\n  * console.log(ridetimes)\n  * });\n  * @return {string} All PARK queuetimes\n  */\n  getWaitTime() {\n    return this.getQueue().then((rides) => Promise.resolve(rides));\n  };\n\n  /**\n  * Get All Calendar Data of a specific park\n  * This data contains all the calendar data of a specific Park\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.PARKNAME();\n  *\n  * park.getCalendar().then((hours) => {\n  * console.log(hours)\n  * });\n  * @return {string} All PARK calendar data\n  */\n  getCalendar() {\n    return this.getOpHours().then((hours) => Promise.resolve(hours));\n  }\n\n  /**\n  * Get All Data of a specific park\n  * This data contains all park's data, which is fetched earlier\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.PARKNAME();\n  *\n  * park.getData().then((data) => {\n  * console.log(data)\n  * });\n  * @return {string} All PARK data(hours, queuetimes)\n  */\n  async getData() {\n    const rides = await this.getQueue();\n    const hours = await this.getOpHours();\n\n    const string = {rides, hours};\n\n    return Promise.resolve(string);\n  }\n};\n\nexport default Park;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/park.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "class",
    "name": "Park",
    "memberof": "lib/parks/park.js",
    "static": true,
    "longname": "lib/parks/park.js~Park",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/park.js",
    "importStyle": "{Park}",
    "description": "Base Park Object",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/parks/entity.js~Entity"
    ]
  },
  {
    "__docId__": 144,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/park.js~Park",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/park.js~Park#constructor",
    "access": "public",
    "description": "Create a new Park object",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "cache",
    "memberof": "lib/parks/park.js~Park",
    "static": false,
    "longname": "lib/parks/park.js~Park#cache",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "getWaitTime",
    "memberof": "lib/parks/park.js~Park",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/park.js~Park#getWaitTime",
    "access": "public",
    "description": "Get All Queues of a park<br />This data contains all the Queues in park",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.PARKNAME();\n\npark.getWaitTime().then((ridetimes) => {\nconsole.log(ridetimes)\n});"
    ],
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All PARK queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getCalendar",
    "memberof": "lib/parks/park.js~Park",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/park.js~Park#getCalendar",
    "access": "public",
    "description": "Get All Calendar Data of a specific park<br />This data contains all the calendar data of a specific Park",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.PARKNAME();\n\npark.getCalendar().then((hours) => {\nconsole.log(hours)\n});"
    ],
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All PARK calendar data"
    },
    "params": []
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "getData",
    "memberof": "lib/parks/park.js~Park",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/park.js~Park#getData",
    "access": "public",
    "description": "Get All Data of a specific park<br />This data contains all park's data, which is fetched earlier",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.PARKNAME();\n\npark.getData().then((data) => {\nconsole.log(data)\n});"
    ],
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All PARK data(hours, queuetimes)"
    },
    "params": []
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "lib/parks/types.js",
    "content": "import dotenv from 'dotenv';\ndotenv.config();\n\nlet languages = process.env.LANGUAGES;\n\nif (!languages) {\n  languages = 'en';\n};\n\n/**\n * Possible types of entity types\n * @enum\n */\nexport let entityType;\n\nif (languages === 'en') {\n  entityType = Object.freeze({\n    ride: 'Attraction',\n    show: 'Show',\n    merchandise: 'Merchandise',\n    restaurant: 'Restaurant',\n    fairytale: 'Fairytale',\n  });\n} else if (languages === 'nl') {\n  entityType = Object.freeze({\n    ride: 'Attractie',\n    show: 'Show',\n    merchandise: 'Merchandise',\n    restaurant: 'Restaurant',\n    fairytale: 'Sprookje',\n  });\n} else if (languages === 'de') {\n  entityType = Object.freeze({\n    ride: 'Attraktion',\n    show: 'Show',\n    merchandise: 'Merchandise',\n    restaurant: 'Restaurant',\n    fairytale: 'Märchen',\n  });\n} else if (languages === 'fr') {\n  entityType = Object.freeze({\n    ride: 'Attraction',\n    show: 'Show',\n    merchandise: 'Merchandise',\n    restaurant: 'Restaurant',\n    fairytale: 'conte de fées',\n  });\n}\n\n/**\n * Possible types of queue statuses\n * @enum\n */\nexport let queueType;\n\nif (languages === 'en') {\n  queueType = Object.freeze({\n    operating: 'Operating',\n    down: 'Down',\n    closed: 'Closed',\n    refurbishment: 'Refurbishment',\n  });\n} else if (languages === 'nl') {\n  queueType = Object.freeze({\n    operating: 'Geopend',\n    down: 'Storing',\n    closed: 'Gesloten',\n    refurbishment: 'Onderhoud',\n  });\n} else if (languages === 'de') {\n  queueType = Object.freeze({\n    operating: 'Geöffnet',\n    down: 'Störung',\n    closed: 'Geschlossen',\n    refurbishment: 'Instandhaltung',\n  });\n} else if (languages === 'fr') {\n  queueType = Object.freeze({\n    operating: 'Ouvert',\n    down: 'Mauvais fonctionnement',\n    closed: 'Fermé',\n    refurbishment: 'Entretien',\n  });\n}\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "languages",
    "memberof": "lib/parks/types.js",
    "static": true,
    "longname": "lib/parks/types.js~languages",
    "access": "public",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/parks/types.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "lib/parks/walibi/walibibelgium.js",
    "content": "import moment from 'moment-timezone';\nimport fetch from 'node-fetch';\nimport {Park} from '../park.js';\nimport {entityType, queueType} from '../types.js';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* Walibi Belgium Park Object\n* Make sure all environment variables are set in an .env file which should be in the main location.\n* Not setting these variables will make the module exit early without returning data.\n*\n* This class is here to fetch the POI data and to attach queue times data to it.\n* After the fetches this data is send to the end user and from there he could do whatever he wants to do.\n*\n* Most park specific parameters are set already\n* @class\n*/\nexport class WalibiBelgium extends Park {\n  /**\n  * Create a new Walibi Belgium Park object\n  * @param {object} options\n  */\n  constructor(options = {}) {\n    options.name = options.name || 'Walibi Belgium';\n    options.timezone = options.timezone || 'Europe/Brussels';\n\n    // Set the parking's entrance as the parks default location\n    options.latitude = 50.7038852;\n    options.longitude = 4.5960371;\n\n    // Options for our park Object\n    options.supportswaittimes = 'true';\n    options.supportsschedule = 'false';\n    options.supportsrideschedules = 'false';\n    options.fastPass = 'true';\n    options.FastPassReturnTimes = 'false';\n\n    // API options\n    options.apiBase = options.apiBase || process.env.WALIBIBELGIUM_APIBASE;\n\n    // Language settings\n    options.languages = options.languages || process.env.LANGUAGES;\n\n    options.langoptions = options.langoptions || `{'en', 'de', 'nl'}`;\n\n    super(options);\n\n    // Check for existance\n    if (!this.config.apiBase) throw new Error('Missing Walibi Belgium apiBase!');\n    if (!this.config.languages) {\n      this.config.languages = 'en';\n    };\n  }\n\n  // Load the Walibi Belgium poidata\n  // const poidata = ('./data/parks/walibi/walibiBelgium_pois.json')\n  // const poimock = ('./data/parks/walibi/walibiBelgium_poi_mock.json')\n\n  /**\n  * Get All POIS of Walibi Belgium\n  * This data contains all the POIS in Walibi Belgium, limited to their fast-lane services\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.WalibiBelgium();\n  *\n  * park.getPois().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Walibi Belgium POIS with queuetimes\n  */\n  async getQueue() {\n    return fetch(this.config.apiBase +\n      '/entertainments',\n    {\n      method: 'GET',\n    },\n    )\n        .then((res) => res.json())\n        .then((rideData) => {\n          const poi = [];\n          rideData.entertainment.forEach((ride) => {\n            let waitTime = null;\n            let active = null;\n            let state = null;\n\n            if (ride.waitingTime == -10) {\n              waitTime = '0';\n              state = queueType.closed;\n              active = 'false';\n            } else {\n              waitTime = ride.waitingTime;\n              state = queueType.operating;\n              active = 'true';\n            }\n\n            let minHeight = null;\n            let minHeightCompanion = null;\n\n            ride.parameters.forEach((param) => {\n              if (param.title === 'taille min accompagné') {\n                minHeightCompanion = param.value;\n              } else if (param.title === 'taille min non accompagné') {\n                minHeight = param.value;\n              }\n            });\n\n            const poiData = {\n              name: ride.title,\n              id: 'WalibiBelgium' + ride.uuid,\n              state: state,\n              active: active,\n              waitTime: waitTime,\n              location: {\n                latitude: ride.location.lat,\n                longitude: ride.location.lon,\n              },\n              meta: {\n                category: ride.category.name,\n                type: entityType.ride,\n                restrictions: {\n                  minHeight: minHeight,\n                  minHeightAccompanies: minHeightCompanion,\n                },\n              },\n            };\n            poi.push(poiData);\n          });\n          return Promise.resolve(poi); // Although we saved them in a json file, we'll just return them for the queue attach function which will run next if you called getQueue()\n        });\n  }\n\n  /**\n  * Get All Operating Hours of Walibi Belgium\n  * This data contains all the Operating Hours in Walibi Belgium, fetched with currentyear.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.WalibiBelgium();\n  *\n  * park.getOpHours().then((hours) => {\n  * console.log(hours)\n  * });\n  * @return {string} All Walibi Belgium calendar data\n  */\n  async getOpHours() {\n    const currentYear = moment().format('YYYY');\n    return fetch(\n        this.config.apiBase +\n          `/calendar/${currentYear}?_format=json`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          // Execute Calendar stuff here\n          return Promise.resolve(Calendar);\n        });\n  }\n}\n\nexport default WalibiBelgium;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/walibi/walibibelgium.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "WalibiBelgium",
    "memberof": "lib/parks/walibi/walibibelgium.js",
    "static": true,
    "longname": "lib/parks/walibi/walibibelgium.js~WalibiBelgium",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/walibi/walibibelgium.js",
    "importStyle": "{WalibiBelgium}",
    "description": "Walibi Belgium Park Object<br />Make sure all environment variables are set in an .env file which should be in the main location.<br />Not setting these variables will make the module exit early without returning data.<br /><br />This class is here to fetch the POI data and to attach queue times data to it.<br />After the fetches this data is send to the end user and from there he could do whatever he wants to do.<br /><br />Most park specific parameters are set already",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/parks/park.js~Park"
    ]
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/walibi/walibibelgium.js~WalibiBelgium",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/walibi/walibibelgium.js~WalibiBelgium#constructor",
    "access": "public",
    "description": "Create a new Walibi Belgium Park object",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/walibi/walibibelgium.js~WalibiBelgium",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibibelgium.js~WalibiBelgium#getQueue",
    "access": "public",
    "description": "Get All POIS of Walibi Belgium<br />This data contains all the POIS in Walibi Belgium, limited to their fast-lane services",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.WalibiBelgium();\n\npark.getPois().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Walibi Belgium POIS with queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/walibi/walibibelgium.js~WalibiBelgium",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibibelgium.js~WalibiBelgium#getOpHours",
    "access": "public",
    "description": "Get All Operating Hours of Walibi Belgium<br />This data contains all the Operating Hours in Walibi Belgium, fetched with currentyear.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.WalibiBelgium();\n\npark.getOpHours().then((hours) => {\nconsole.log(hours)\n});"
    ],
    "lineNumber": 148,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Walibi Belgium calendar data"
    },
    "params": []
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "lib/parks/walibi/walibiholland.js",
    "content": "import moment from 'moment-timezone';\nimport fetch from 'node-fetch';\nimport {Park} from '../park.js';\nimport {entityType, queueType} from '../types.js';\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\n/**\n* Walibi Holland Park Object\n* Make sure all environment variables are set in an .env file which should be in the main location.\n* Not setting these variables will make the module exit early without returning data.\n*\n* This class is here to fetch the POI data and to attach queue times data to it.\n* After the fetches this data is send to the end user and from there he could do whatever he wants to do.\n*\n* Most park specific parameters are set already\n* @class\n*/\nexport class WalibiHolland extends Park {\n  /**\n  * Create a new Walibi Holland Park object\n  * @param {object} options\n  */\n  constructor(options = {}) {\n    options.name = options.name || 'Walibi Holland';\n    options.timezone = options.timezone || 'Europe/Amsterdam';\n\n    // Setting the cute fountain at the entrance as parks location\n    options.latitude = 52.4390338;\n    options.longitude = 5.7665651;\n\n    // Options for our park Object\n    options.supportswaittimes = 'true';\n    options.supportsschedule = 'false';\n    options.supportsrideschedules = 'false';\n    options.fastPass = 'true';\n    options.FastPassReturnTimes = 'false';\n\n    // API options\n    options.apiUrl = options.apiUrl || process.env.WALIBIHOLLAND_APIURL;\n    options.apiBase = options.apiBase || process.env.WALIBIHOLLAND_APIBASE;\n\n    // Language settings\n    options.languages = options.languages || process.env.LANGUAGES;\n\n    options.langoptions = options.langoptions || `{'en', 'de', 'nl'}`;\n\n    super(options);\n\n    // Check for existance\n    if (!this.config.apiUrl) throw new Error('Missing Walibi Holland apiUrl!');\n    if (!this.config.apiBase) throw new Error('Missing Walibi Holland apiBase!');\n    if (!this.config.languages) {\n      this.config.languages = 'en';\n    };\n  }\n\n  // Load the Walibi Holland poidata\n  // const poidata = ('./data/parks/walibi/walibiholland_pois.json')\n  // const poimock = ('./data/parks/walibi/walibiholland_poi_mock.json')\n\n  /**\n  * Get All POIS of Walibi Holland\n  * This data contains all the POIS in Walibi Holland, limited to their fast-lane services\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.WalibiHolland();\n  *\n  * park.getPois().then((pois) => {\n  * console.log(pois)\n  * });\n  * @return {string} All Walibi Holland POIS with queuetimes\n  */\n  async getQueue() {\n    return fetch(this.config.apiUrl,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((rideData) => {\n          const poi = [];\n          rideData.forEach((ride) => {\n            let waitTime = '0';\n            let state = queueType.closed;\n            let active = 'false';\n            if (ride.name !== 'Dummy1') { // They have a dummy ride to sell single shots in their fast-lane, mind=blown\n              if (ride.useVirtualQueue == 'true') { // VirtQueue enabled\n                waitTime = Math.round(ride.waitTimeMins); // Stupid API serves random numbers like 0.00010358, let's round them.\n                state = queueType.operating;\n              } else { // No virtQueue found, use the normal queue instead\n                waitTime = ride.minWait / 60; // Walibi has some calculation issues or sth so divide our result by 60\n                state = queueType.operating;\n              }\n              if (ride.state === 'closed_indefinitely') { // Closed but not closed but still closed\n                state = queueType.closed;\n                active = 'false';\n              } // Declare other states when park reopens\n              // POI Object with queues\n              const poiData = {\n                name: ride.name,\n                id: 'WalibiHolland_' + ride.shortId,\n                state: state,\n                active: active,\n                waitTime: waitTime,\n                meta: {\n                  type: entityType.ride,\n                },\n              };\n              poi.push(poiData);\n            }\n          });\n          return Promise.resolve(poi); // Although we saved them in a json file, we'll just return them for the queue attach function which will run next if you called getQueue()\n        });\n  }\n\n  /**\n  * Get All Operating Hours of Walibi Holland\n  * This data contains all the Operating Hours in Walibi Holland, fetched with currentyear.\n  * @example\n  * import tpapi from '@alexvv13/tpapi';\n  *\n  * const park = new tpapi.park.WalibiHolland();\n  *\n  * park.getOpHours().then((hours) => {\n  * console.log(hours)\n  * });\n  * @return {string} All Walibi Holland calendar data\n  */\n  async getOpHours() {\n    const currentYear = moment().format('YYYY');\n    return fetch(\n        this.config.apiBase +\n          `/calendar/${currentYear}?_format=json`,\n        {\n          method: 'GET',\n        },\n    )\n        .then((res) => res.json())\n        .then((json) => {\n          const Calendar = [];\n          // Execute Calendar stuff here\n          return Promise.resolve(Calendar);\n        });\n  }\n}\n\nexport default WalibiHolland;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/parks/walibi/walibiholland.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "WalibiHolland",
    "memberof": "lib/parks/walibi/walibiholland.js",
    "static": true,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/parks/walibi/walibiholland.js",
    "importStyle": "{WalibiHolland}",
    "description": "Walibi Holland Park Object<br />Make sure all environment variables are set in an .env file which should be in the main location.<br />Not setting these variables will make the module exit early without returning data.<br /><br />This class is here to fetch the POI data and to attach queue times data to it.<br />After the fetches this data is send to the end user and from there he could do whatever he wants to do.<br /><br />Most park specific parameters are set already",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "lib/parks/park.js~Park"
    ]
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#constructor",
    "access": "public",
    "description": "Create a new Walibi Holland Park object",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "getQueue",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getQueue",
    "access": "public",
    "description": "Get All POIS of Walibi Holland<br />This data contains all the POIS in Walibi Holland, limited to their fast-lane services",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.WalibiHolland();\n\npark.getPois().then((pois) => {\nconsole.log(pois)\n});"
    ],
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Walibi Holland POIS with queuetimes"
    },
    "params": []
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "getOpHours",
    "memberof": "lib/parks/walibi/walibiholland.js~WalibiHolland",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/parks/walibi/walibiholland.js~WalibiHolland#getOpHours",
    "access": "public",
    "description": "Get All Operating Hours of Walibi Holland<br />This data contains all the Operating Hours in Walibi Holland, fetched with currentyear.",
    "examples": [
      "import tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.park.WalibiHolland();\n\npark.getOpHours().then((hours) => {\nconsole.log(hours)\n});"
    ],
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "All Walibi Holland calendar data"
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "lib/reusePromises.js",
    "content": "/**\n * Module that wraps re-using the same Promise multiple times.\n * This allows a function to be called multiple times before returning, but only return once.\n * Useful for latent network requests,\n *  such as requesting a document from multiple sources, but only making one HTTP request.\n */\n\nconst activeFunctions = [];\n\n/**\n * Find the active function with these arguments\n * @param {*} self\n * @param {function} fn\n * @param {string} argsSerialised\n * @return {number}\n * @private\n */\nfunction findActiveFunctionIndex(self, fn, argsSerialised) {\n  return activeFunctions.findIndex((x) => {\n    return x.self === self && x.fn === fn && x.args === argsSerialised;\n  });\n}\n\n/**\n * Reuse a function until it resolves\n * @param {*} self\n * @param {function} fn\n * @param  {...any} args Arguments to pass to the function\n * @return {Promise}\n */\nexport function reusePromise(self, fn, ...args) {\n  return _reusePromise(false, self, fn, ...args);\n}\n\n/**\n * Reuse a function, returning it's result forever\n * @param {*} self\n * @param {function} fn\n * @param  {...any} args Arguments to pass to the function\n * @return {Promise}\n */\nexport function reusePromiseForever(self, fn, ...args) {\n  return _reusePromise(true, self, fn, ...args);\n}\n\n/**\n * Internal call to run a Promise once time (and optionally keep result forever)\n * @param {boolean} useResultForever\n * @param {*} self\n * @param {function} fn\n * @param  {...any} args\n * @return {Promise}\n * @private\n */\nfunction _reusePromise(useResultForever, self, fn, ...args) {\n  // search for existing promise that hasn't resolved yet\n  const argsSerialise = args ? JSON.stringify(args) : null;\n  const existingFunctionIndex = findActiveFunctionIndex(self, fn, argsSerialise);\n  const existingFunction = existingFunctionIndex >= 0 ? activeFunctions[existingFunctionIndex] : undefined;\n  if (existingFunction) {\n    if (existingFunction.resolved) {\n      return existingFunction.value;\n    }\n    return existingFunction.promise;\n  }\n\n  const cleanupPendingFunction = () => {\n    const pendingFunctionIDX = findActiveFunctionIndex(self, fn, argsSerialise);\n    if (pendingFunctionIDX >= 0) {\n      if (!useResultForever) {\n      // clean up pending Promise\n        activeFunctions.splice(pendingFunctionIDX, 1);\n      }\n    }\n  };\n\n  // didn't find a pending existing promise, make a new one!\n  const newPromise = (self !== null && self !== undefined) ? fn.apply(self, args) : fn(...args);\n  newPromise.then((value) => {\n    // clean up our pending Promise\n    if (!useResultForever) {\n      cleanupPendingFunction();\n    } else {\n      const pendingFunctionIDX = findActiveFunctionIndex(self, fn, argsSerialise);\n      if (pendingFunctionIDX >= 0) {\n      // store result so we can re-use it for future calls\n        activeFunctions[pendingFunctionIDX].resolved = true;\n        activeFunctions[pendingFunctionIDX].value = value;\n      }\n    }\n\n    return value;\n  }).catch((err) => {\n    cleanupPendingFunction();\n    throw err;\n  });\n  activeFunctions.push({\n    fn,\n    self,\n    args: argsSerialise,\n    promise: newPromise,\n    resolved: false,\n  });\n  return newPromise;\n}\n\nexport default reusePromise;\n",
    "static": true,
    "longname": "/home/runner/work/tp-api/tp-api/lib/reusePromises.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "variable",
    "name": "activeFunctions",
    "memberof": "lib/reusePromises.js",
    "static": true,
    "longname": "lib/reusePromises.js~activeFunctions",
    "access": "public",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/reusePromises.js",
    "importStyle": null,
    "description": "Module that wraps re-using the same Promise multiple times.<br />This allows a function to be called multiple times before returning, but only return once.<br />Useful for latent network requests,<br /> such as requesting a document from multiple sources, but only making one HTTP request.",
    "lineNumber": 8,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "findActiveFunctionIndex",
    "memberof": "lib/reusePromises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/reusePromises.js~findActiveFunctionIndex",
    "access": "private",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/reusePromises.js",
    "importStyle": null,
    "description": "Find the active function with these arguments",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "argsSerialised",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "reusePromise",
    "memberof": "lib/reusePromises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/reusePromises.js~reusePromise",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/reusePromises.js",
    "importStyle": "{reusePromise}",
    "description": "Reuse a function until it resolves",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Arguments to pass to the function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "reusePromiseForever",
    "memberof": "lib/reusePromises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/reusePromises.js~reusePromiseForever",
    "access": "public",
    "export": true,
    "importPath": "@alexvv13/tpapi/lib/reusePromises.js",
    "importStyle": "{reusePromiseForever}",
    "description": "Reuse a function, returning it's result forever",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Arguments to pass to the function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "_reusePromise",
    "memberof": "lib/reusePromises.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/reusePromises.js~_reusePromise",
    "access": "private",
    "export": false,
    "importPath": "@alexvv13/tpapi/lib/reusePromises.js",
    "importStyle": null,
    "description": "Internal call to run a Promise once time (and optionally keep result forever)",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useResultForever",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "self",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Themeparks-API\nThemeparks API loosely based on existing examples, however I wanted to kill some time and then this came up. Don't expect anything too cool tho.</br>\n\n![Unit Test](https://github.com/alexvv13/tp-api/workflows/Unit%20Test/badge.svg)\n![Documentation Build](https://github.com/alexvv13/tp-api/workflows/ESDoc/badge.svg)\n![Node.js CI](https://github.com/alexvv13/tp-api/workflows/Node.js%20CI/badge.svg)\n[![Build Status](https://api.travis-ci.com/alexvv13/tp-api.svg?branch=master)](https://travis-ci.com/alexvv13/tp-api) </br>\n\n![node-current](https://img.shields.io/node/v/@alexvv13/tpapi)\n[![npm version](https://badge.fury.io/js/%40alexvv13%2Ftpapi.svg)](https://badge.fury.io/js/%40alexvv13%2Ftpapi) </br>\n\n![Snyk Vulnerabilities for GitHub Repo](https://img.shields.io/snyk/vulnerabilities/github/alexvv13/tp-api.svg) </br>\n\n[API documentation](https://alexvv13.github.io/tp-api \"API Documentation\") </br>\n[NPM Package](https://www.npmjs.com/package/@alexvv13/tpapi \"NPM Package\") </br>\n\n## About\nThis is a module which fetches queue times and operating hours, and returns it as JSON to the user, the data could be used for anything, a website, a discordjs bot, some personal stuff or whatever. Be aware it's not perfect, but it works. It's just being build to work and return data, not to be efficient anyway.\n\n## Table of Contents\n[About](#about)</br>\n[Table of Contents](#table-of-contents) </br>\n[Install](#install) </br>\n[ENV](#env) </br>\n[Usage](#usage) </br>\n[  -Running the script](#running-the-script) </br>\n[  -Example output](#example-output) </br>\n[Changelog](#changelog) </br>\n[Parks available](#parks-available) </br>\n[Features of supported parks](#features-of-the-parks) </br>\n[Result objects](#result-objects) </br>\n[  -Ride waittimes](#ride-waittimes) </br>\n[  -Schedules](#schedules) </br>\n[Park object values](#park-object-values) </br>\n[Tasks](#tasks) </br>\n\n## Install\n\n    npm install @alexvv13/tpapi --save\n    \n\n## ENV\nIn the directory where you're using tpapi, create an .env file and fill in the fields, an example can be found in the Github Repo, or in the ${path}/node_modules/@alexvv13/tpapi/.env.example, or copy below's example and fill in the fields yourself\n```\nLANGUAGES= 'en'\nLANG_UPPER= 'EN'\n\nEFTELING_API_KEY= \nEFTELING_APP_VERSION= \nEFTELING_API_VERSION= \nEFTELING_API_PLATFORM= \n\nEFTELING_SEARCH_URL= \nEFTELING_WAITTIMES_URL= \nEFTELING_HIST_URL= \n\nEUROPAPARK_APIBASE= \nEUROPAPARK_LOGINSTRING= \nEUROPAPARK_LOGIN= \nEUROPAPARK_REFRESH= \n\nWALIBIHOLLAND_APIBASE= \nWALIBIHOLLAND_APIURL= \nWALIBIBELGIUM_APIBASE=\nWALIBIRA_APIBASE=\n```\n\n## Usage\n### Running the script\nRun index.js for all parks </br>\nNOTE: If you use commonjs, it's REQUIRED to use the .mjs extension INSTEAD of .js! </br>\nOr create an .js file for yourself and do the following: </br>\n```javascript\n// Import all parks here\nimport tpapi from '@alexvv13/tpapi';\n\nconst park = new tpapi.parks.Efteling();\n\n// Fetch POIS Example usage of Efteling\npark.getWaitTime().then((poiData) => {\n  console.log(poiData);\n});\n\n// You can also call getCalendar() or getData()\n```\n\n### Example output\n(Shortened to keep it readable)\n```javascript\n{\n  \"name\": \"Stoomcarrousel\",\n  \"id\": \"Efteling_stoomcarrousel\",\n  \"waitTime\": \"0\",\n  \"state\": \"Closed\",\n  \"active\": \"false\",\n  \"location\": {\n    \"area\": \"Marerijk\",\n    \"latitude\": \"51.651211\",\n    \"longitude\": \"5.048955\"\n  },\n  \"meta\": {\n    \"category\": [\n      \"youngest-ones\",\n      \"whole-family\"\n    ],\n    \"label\": null,\n    \"description\": \"<p>Would you like a horse, a carriage, a pig or another vehicle? Take your seat in the ‘Stoomcarrousel’ steam carousell, which is more than 100 years old, and lit it spin you around! Duration: varies.   Wheelchair access: via the exit from this attraction.</p>\",\n    \"short_description\": \"The old-fashioned fairground feeling\",\n    \"type\": \"attraction\",\n    \"single_rider\": \"false\",\n    \"fastPass\": \"false\",\n    \"tags\": [\n      \"nophysicalhelp2\",\n      \"redwhitezones\",\n      \"placesallocated\",\n      \"leavingearlynotpossible2\",\n      \"transfernecessary\",\n      \"100undersupervision\",\n      \"indoorattraction\",\n      \"assistancedogs\"\n    ]\n  }\n},\n{\n  \"name\": \"Vogel Rok\",\n  \"id\": \"Efteling_vogelrok\",\n  \"waitTime\": \"0\",\n  \"state\": \"Closed\",\n  \"active\": \"false\",\n  \"location\": {\n    \"area\": \"Reizenrijk\",\n    \"latitude\": \"51.652187\",\n    \"longitude\": \"5.052811\"\n  },\n  \"meta\": {\n    \"category\": [\n      \"thrillseekers\"\n    ],\n    \"label\": null,\n    \"description\": \"<p>The Vogel Rok is an exiting indoor rollercoaster in the dark. The rollercoaster does not completely turn over, but does zoom through the dark at 40 mph. You must be at least 1.20 meter tall for this attraction. Duration: almost 2 minutes.   Wheelchair access: via the usual entrance to this attraction until the bottom of the stairs. Call here. An employee will then come to meet you.</p>\",\n    \"short_description\": \"Lightning in the dark\",\n    \"type\": \"attraction\",\n    \"single_rider\": \"false\",\n    \"fastPass\": \"false\",\n    \"tags\": [\n      \"nophysicalhelp2\",\n      \"redwhitezones\",\n      \"placesallocated\",\n      \"leavingearlynotpossible2\",\n      \"transfernecessary\",\n      \"minimum120\",\n      \"pregnantwomen\",\n      \"injuries\",\n      \"dizzy\",\n      \"indoorattraction\"\n    ]\n  }\n}\n```\n   \n## Changelog\n\n[View tp-api Changelog](CHANGELOG.md)\n\n## Parks available\n\n<!-- START_SUPPORTED_PARKS_LIST -->\n\n**3** Parks Supported\n\n* Efteling (tpapi.parks.Efteling)\n* Europa-Park (tpapi.parks.EuropaPark)\n* Walibi Holland (tpapi.parks.WalibiHolland)\n* Walibi Belgium (tpapi.parks.WalibiBelgium)\n\n<!-- END_SUPPORTED_PARKS_LIST -->\n\n## Features of the parks\n\nPark Name | Live Queues | Park Hours\n------------ | ------------- | ----------\nEfteling |:heavy_check_mark:|:heavy_check_mark:\nEuropa-Park |:heavy_check_mark:|:heavy_multiplication_x:\nWalibi Holland |:heavy_check_mark:|:heavy_multiplication_x:\nWalibi Belgium |:heavy_check_mark:|:heavy_multiplication_x:\n\n## Result Objects\n\n### Ride WaitTimes\n\n    [\n        {\n            id: (string or number: uniquely identifying a ride),\n            name: (string: ride name),\n            waitTime: (number: current wait time in minutes),\n            active: (bool: is the ride currently active?),\n            location: (object: contains location data such as latlon\n                 latitude: (number: ride's latitude),\n                 longitude: (number: ride's longitude),\n            meta: { (object: can contain various park-specific information about this ride - field may be null)\n                // examples of potential meta fields\n                single_rider: (boolean: does this ride have a single rider line?),\n                type: (string: what is this poi?),\n                fastPass: (boolean: does this ride have a fastPass line?),\n                isVirtQueue: (boolean: is this entity a Virtual Queue?),\n                area: (string: section of the park this ride is located within),\n                tags: { (object: can contain various ride-specific tags, can be null and fields differ per park)\n                },\n                restrictions: { (object: can contain various ride-specific restrictions(minHeight etc), can be null and fields differ per park)\n                },\n            },\n            status: (string: will either be \"Operating\", \"Closed\", \"Refurbishment\", or \"Down\"),\n        },\n        ...\n    ]\n\n### Schedules\n\n    [\n        {\n            date: (dateFormat timestamp: day this schedule applies),\n            openingTime: (timeFormat timestamp: opening time for requested park - can be null if park is closed),\n            closingTime: (timeFormat timestamp: closing time for requested park - can be null if park is closed),\n            type: (string: \"Operating\" or \"Closed\"),\n            special: [ (array of \"special\" times for this day, usually Disney Extra Magic Hours or similar at other parks - field may be null)\n              openingTime: (timeFormat timestamp: opening time for requested park),\n              closingTime: (timeFormat timestamp: closing time for requested park),\n              type: (string: type of schedule eg. \"Extra Magic Hours\", but can be \"Event\" or \"Special Ticketed Event\" or other)\n            ],\n        },\n        ...\n    ]\n\n## Park Object values\n\nThere are some values available on each park object that may be useful.\n\n| Variable              | Description                                                                                                 |\n| :-------------------- | :---------------------------------------------------------------------------------------------------------- |\n| Name                  | Name of the park                                                                                            |\n| Timezone              | The park's local timezone                                                                                   |\n| LocationString        | This park's location as a [latitude, longitude] string                                                                |\n| SupportsWaitTimes     | Does this park's API support ride wait times?                                                               |\n| SupportsOpeningTimes  | Does this park's API support opening hours?                                                                 |\n| SupportsRideSchedules | Does this park return schedules for rides?                                                                  |\n| FastPass              | Does this park have FastPass (or a FastPass-style service)?                                                 |\n| FastPassReturnTimes   | Does this park tell you the FastPass return times?                                                          |\n| Now                   | Current date/time at this park (returned as a Moment object)                                                |\n| LangOptions             | What languages does this park support? ||\n\n    import tpapi from '@alexvv13/tpapi';\n\n    // construct our park objects and keep them in memory for fast access later\n    const Parks = {};\n    for (const park in tpapi.parks) {\n      Parks[park] = new tpapi.parks[park]();\n    }\n\n    // print each park's name, current location, and timezone\n    for (const park in Parks) {\n      console.log(`* ${Parks[park].Name} [${Parks[park].LocationString}]: (${Parks[park].Timezone})`);\n    }\n\nPrints:\n\n<!-- START_PARK_TIMEZONE_LIST -->\n\n* Efteling [51.65098350641645, 5.049916835374731]: (Europe/Amsterdam)\n* Europa-Park [48.266140769976715, 7.722050520358709]: (Europe/Berlin)\n* Walibi Belgium [50.7038852, 4.5960371]: (Europe/Brussels)\n* Walibi Holland [52.4390338, 5.7665651]: (Europe/Amsterdam)\n\n<!-- END_PARK_TIMEZONE_LIST -->\n\n## Tasks\n- [ ] Add more parks\n- [X] Multi language support\n- [ ] Multiple Queue entities support\n- [X] Completely purge file-system\n- [X] Merge shared tasks to one function\n- [X] Generate a better infrastructure\n\n",
    "longname": "/home/runner/work/tp-api/tp-api/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@alexvv13/tpapi\",\n  \"version\": \"1.0.17\",\n  \"type\": \"module\",\n  \"description\": \"Api to fetch themepark data, such as queues, operating hours etc\",\n  \"engines\": {\n    \"npm\": \">=6\",\n    \"node\": \">=14\"\n  },\n  \"main\": \"lib/index.js\",\n  \"dependencies\": {\n    \"dotenv\": \"^8.2.0\",\n    \"esm\": \"^3.2.25\",\n    \"level\": \"^6.0.1\",\n    \"moment-timezone\": \"^0.5.32\",\n    \"node-fetch\": \"^2.6.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/traverse\": \"^7.11.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.15.0\",\n    \"eslint-config-google\": \"^0.14.0\",\n    \"eslint-config-prettier\": \"^7.0.0\",\n    \"eslint-plugin-mocha\": \"^8.0.0\",\n    \"eslint-plugin-prettier\": \"^3.3.0\"\n  },\n  \"scripts\": {\n    \"test\": \"eslint ./lib/**\",\n    \"docs\": \"esdoc\"\n  },\n  \"exports\": {\n    \".\": \"./lib/index.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/AlexVV13/tp-api.git\"\n  },\n  \"keywords\": [\n    \"Api\",\n    \"themeparks\",\n    \"queue\",\n    \"calendar\"\n  ],\n  \"author\": \"Alex_VV\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/AlexVV13/tp-api/issues\"\n  },\n  \"homepage\": \"https://github.com/AlexVV13/tp-api#readme\",\n  \"directories\": {\n    \"lib\": \"lib\"\n  }\n}\n",
    "longname": "/home/runner/work/tp-api/tp-api/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]